// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Qot_Common.proto

package Qot_Common

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type QotMarket int32

const (
	QotMarket_QotMarket_Unknown       QotMarket = 0
	QotMarket_QotMarket_HK_Security   QotMarket = 1
	QotMarket_QotMarket_HK_Future     QotMarket = 2
	QotMarket_QotMarket_US_Security   QotMarket = 11
	QotMarket_QotMarket_CNSH_Security QotMarket = 21
	QotMarket_QotMarket_CNSZ_Security QotMarket = 22
)

var QotMarket_name = map[int32]string{
	0:  "QotMarket_Unknown",
	1:  "QotMarket_HK_Security",
	2:  "QotMarket_HK_Future",
	11: "QotMarket_US_Security",
	21: "QotMarket_CNSH_Security",
	22: "QotMarket_CNSZ_Security",
}

var QotMarket_value = map[string]int32{
	"QotMarket_Unknown":       0,
	"QotMarket_HK_Security":   1,
	"QotMarket_HK_Future":     2,
	"QotMarket_US_Security":   11,
	"QotMarket_CNSH_Security": 21,
	"QotMarket_CNSZ_Security": 22,
}

func (x QotMarket) Enum() *QotMarket {
	p := new(QotMarket)
	*p = x
	return p
}

func (x QotMarket) String() string {
	return proto.EnumName(QotMarket_name, int32(x))
}

func (x *QotMarket) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(QotMarket_value, data, "QotMarket")
	if err != nil {
		return err
	}
	*x = QotMarket(value)
	return nil
}

func (QotMarket) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{0}
}

type SecurityType int32

const (
	SecurityType_SecurityType_Unknown  SecurityType = 0
	SecurityType_SecurityType_Bond     SecurityType = 1
	SecurityType_SecurityType_Bwrt     SecurityType = 2
	SecurityType_SecurityType_Eqty     SecurityType = 3
	SecurityType_SecurityType_Trust    SecurityType = 4
	SecurityType_SecurityType_Warrant  SecurityType = 5
	SecurityType_SecurityType_Index    SecurityType = 6
	SecurityType_SecurityType_Plate    SecurityType = 7
	SecurityType_SecurityType_Drvt     SecurityType = 8
	SecurityType_SecurityType_PlateSet SecurityType = 9
	SecurityType_SecurityType_Future   SecurityType = 10
)

var SecurityType_name = map[int32]string{
	0:  "SecurityType_Unknown",
	1:  "SecurityType_Bond",
	2:  "SecurityType_Bwrt",
	3:  "SecurityType_Eqty",
	4:  "SecurityType_Trust",
	5:  "SecurityType_Warrant",
	6:  "SecurityType_Index",
	7:  "SecurityType_Plate",
	8:  "SecurityType_Drvt",
	9:  "SecurityType_PlateSet",
	10: "SecurityType_Future",
}

var SecurityType_value = map[string]int32{
	"SecurityType_Unknown":  0,
	"SecurityType_Bond":     1,
	"SecurityType_Bwrt":     2,
	"SecurityType_Eqty":     3,
	"SecurityType_Trust":    4,
	"SecurityType_Warrant":  5,
	"SecurityType_Index":    6,
	"SecurityType_Plate":    7,
	"SecurityType_Drvt":     8,
	"SecurityType_PlateSet": 9,
	"SecurityType_Future":   10,
}

func (x SecurityType) Enum() *SecurityType {
	p := new(SecurityType)
	*p = x
	return p
}

func (x SecurityType) String() string {
	return proto.EnumName(SecurityType_name, int32(x))
}

func (x *SecurityType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SecurityType_value, data, "SecurityType")
	if err != nil {
		return err
	}
	*x = SecurityType(value)
	return nil
}

func (SecurityType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{1}
}

type PlateSetType int32

const (
	PlateSetType_PlateSetType_All      PlateSetType = 0
	PlateSetType_PlateSetType_Industry PlateSetType = 1
	PlateSetType_PlateSetType_Region   PlateSetType = 2
	PlateSetType_PlateSetType_Concept  PlateSetType = 3
	PlateSetType_PlateSetType_Other    PlateSetType = 4
)

var PlateSetType_name = map[int32]string{
	0: "PlateSetType_All",
	1: "PlateSetType_Industry",
	2: "PlateSetType_Region",
	3: "PlateSetType_Concept",
	4: "PlateSetType_Other",
}

var PlateSetType_value = map[string]int32{
	"PlateSetType_All":      0,
	"PlateSetType_Industry": 1,
	"PlateSetType_Region":   2,
	"PlateSetType_Concept":  3,
	"PlateSetType_Other":    4,
}

func (x PlateSetType) Enum() *PlateSetType {
	p := new(PlateSetType)
	*p = x
	return p
}

func (x PlateSetType) String() string {
	return proto.EnumName(PlateSetType_name, int32(x))
}

func (x *PlateSetType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PlateSetType_value, data, "PlateSetType")
	if err != nil {
		return err
	}
	*x = PlateSetType(value)
	return nil
}

func (PlateSetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{2}
}

type WarrantType int32

const (
	WarrantType_WarrantType_Unknown WarrantType = 0
	WarrantType_WarrantType_Buy     WarrantType = 1
	WarrantType_WarrantType_Sell    WarrantType = 2
	WarrantType_WarrantType_Bull    WarrantType = 3
	WarrantType_WarrantType_Bear    WarrantType = 4
	WarrantType_WarrantType_InLine  WarrantType = 5
)

var WarrantType_name = map[int32]string{
	0: "WarrantType_Unknown",
	1: "WarrantType_Buy",
	2: "WarrantType_Sell",
	3: "WarrantType_Bull",
	4: "WarrantType_Bear",
	5: "WarrantType_InLine",
}

var WarrantType_value = map[string]int32{
	"WarrantType_Unknown": 0,
	"WarrantType_Buy":     1,
	"WarrantType_Sell":    2,
	"WarrantType_Bull":    3,
	"WarrantType_Bear":    4,
	"WarrantType_InLine":  5,
}

func (x WarrantType) Enum() *WarrantType {
	p := new(WarrantType)
	*p = x
	return p
}

func (x WarrantType) String() string {
	return proto.EnumName(WarrantType_name, int32(x))
}

func (x *WarrantType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WarrantType_value, data, "WarrantType")
	if err != nil {
		return err
	}
	*x = WarrantType(value)
	return nil
}

func (WarrantType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{3}
}

type OptionType int32

const (
	OptionType_OptionType_Unknown OptionType = 0
	OptionType_OptionType_Call    OptionType = 1
	OptionType_OptionType_Put     OptionType = 2
)

var OptionType_name = map[int32]string{
	0: "OptionType_Unknown",
	1: "OptionType_Call",
	2: "OptionType_Put",
}

var OptionType_value = map[string]int32{
	"OptionType_Unknown": 0,
	"OptionType_Call":    1,
	"OptionType_Put":     2,
}

func (x OptionType) Enum() *OptionType {
	p := new(OptionType)
	*p = x
	return p
}

func (x OptionType) String() string {
	return proto.EnumName(OptionType_name, int32(x))
}

func (x *OptionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OptionType_value, data, "OptionType")
	if err != nil {
		return err
	}
	*x = OptionType(value)
	return nil
}

func (OptionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{4}
}

type IndexOptionType int32

const (
	IndexOptionType_IndexOptionType_Unknown IndexOptionType = 0
	IndexOptionType_IndexOptionType_Normal  IndexOptionType = 1
	IndexOptionType_IndexOptionType_Small   IndexOptionType = 2
)

var IndexOptionType_name = map[int32]string{
	0: "IndexOptionType_Unknown",
	1: "IndexOptionType_Normal",
	2: "IndexOptionType_Small",
}

var IndexOptionType_value = map[string]int32{
	"IndexOptionType_Unknown": 0,
	"IndexOptionType_Normal":  1,
	"IndexOptionType_Small":   2,
}

func (x IndexOptionType) Enum() *IndexOptionType {
	p := new(IndexOptionType)
	*p = x
	return p
}

func (x IndexOptionType) String() string {
	return proto.EnumName(IndexOptionType_name, int32(x))
}

func (x *IndexOptionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IndexOptionType_value, data, "IndexOptionType")
	if err != nil {
		return err
	}
	*x = IndexOptionType(value)
	return nil
}

func (IndexOptionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{5}
}

type OptionAreaType int32

const (
	OptionAreaType_OptionAreaType_Unknown  OptionAreaType = 0
	OptionAreaType_OptionAreaType_American OptionAreaType = 1
	OptionAreaType_OptionAreaType_European OptionAreaType = 2
	OptionAreaType_OptionAreaType_Bermuda  OptionAreaType = 3
)

var OptionAreaType_name = map[int32]string{
	0: "OptionAreaType_Unknown",
	1: "OptionAreaType_American",
	2: "OptionAreaType_European",
	3: "OptionAreaType_Bermuda",
}

var OptionAreaType_value = map[string]int32{
	"OptionAreaType_Unknown":  0,
	"OptionAreaType_American": 1,
	"OptionAreaType_European": 2,
	"OptionAreaType_Bermuda":  3,
}

func (x OptionAreaType) Enum() *OptionAreaType {
	p := new(OptionAreaType)
	*p = x
	return p
}

func (x OptionAreaType) String() string {
	return proto.EnumName(OptionAreaType_name, int32(x))
}

func (x *OptionAreaType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OptionAreaType_value, data, "OptionAreaType")
	if err != nil {
		return err
	}
	*x = OptionAreaType(value)
	return nil
}

func (OptionAreaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{6}
}

type QotMarketState int32

const (
	QotMarketState_QotMarketState_None                 QotMarketState = 0
	QotMarketState_QotMarketState_Auction              QotMarketState = 1
	QotMarketState_QotMarketState_WaitingOpen          QotMarketState = 2
	QotMarketState_QotMarketState_Morning              QotMarketState = 3
	QotMarketState_QotMarketState_Rest                 QotMarketState = 4
	QotMarketState_QotMarketState_Afternoon            QotMarketState = 5
	QotMarketState_QotMarketState_Closed               QotMarketState = 6
	QotMarketState_QotMarketState_PreMarketBegin       QotMarketState = 8
	QotMarketState_QotMarketState_PreMarketEnd         QotMarketState = 9
	QotMarketState_QotMarketState_AfterHoursBegin      QotMarketState = 10
	QotMarketState_QotMarketState_AfterHoursEnd        QotMarketState = 11
	QotMarketState_QotMarketState_NightOpen            QotMarketState = 13
	QotMarketState_QotMarketState_NightEnd             QotMarketState = 14
	QotMarketState_QotMarketState_FutureDayOpen        QotMarketState = 15
	QotMarketState_QotMarketState_FutureDayBreak       QotMarketState = 16
	QotMarketState_QotMarketState_FutureDayClose       QotMarketState = 17
	QotMarketState_QotMarketState_FutureDayWaitForOpen QotMarketState = 18
	QotMarketState_QotMarketState_HkCas                QotMarketState = 19
)

var QotMarketState_name = map[int32]string{
	0:  "QotMarketState_None",
	1:  "QotMarketState_Auction",
	2:  "QotMarketState_WaitingOpen",
	3:  "QotMarketState_Morning",
	4:  "QotMarketState_Rest",
	5:  "QotMarketState_Afternoon",
	6:  "QotMarketState_Closed",
	8:  "QotMarketState_PreMarketBegin",
	9:  "QotMarketState_PreMarketEnd",
	10: "QotMarketState_AfterHoursBegin",
	11: "QotMarketState_AfterHoursEnd",
	13: "QotMarketState_NightOpen",
	14: "QotMarketState_NightEnd",
	15: "QotMarketState_FutureDayOpen",
	16: "QotMarketState_FutureDayBreak",
	17: "QotMarketState_FutureDayClose",
	18: "QotMarketState_FutureDayWaitForOpen",
	19: "QotMarketState_HkCas",
}

var QotMarketState_value = map[string]int32{
	"QotMarketState_None":                 0,
	"QotMarketState_Auction":              1,
	"QotMarketState_WaitingOpen":          2,
	"QotMarketState_Morning":              3,
	"QotMarketState_Rest":                 4,
	"QotMarketState_Afternoon":            5,
	"QotMarketState_Closed":               6,
	"QotMarketState_PreMarketBegin":       8,
	"QotMarketState_PreMarketEnd":         9,
	"QotMarketState_AfterHoursBegin":      10,
	"QotMarketState_AfterHoursEnd":        11,
	"QotMarketState_NightOpen":            13,
	"QotMarketState_NightEnd":             14,
	"QotMarketState_FutureDayOpen":        15,
	"QotMarketState_FutureDayBreak":       16,
	"QotMarketState_FutureDayClose":       17,
	"QotMarketState_FutureDayWaitForOpen": 18,
	"QotMarketState_HkCas":                19,
}

func (x QotMarketState) Enum() *QotMarketState {
	p := new(QotMarketState)
	*p = x
	return p
}

func (x QotMarketState) String() string {
	return proto.EnumName(QotMarketState_name, int32(x))
}

func (x *QotMarketState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(QotMarketState_value, data, "QotMarketState")
	if err != nil {
		return err
	}
	*x = QotMarketState(value)
	return nil
}

func (QotMarketState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{7}
}

//交易日查询市场
type TradeDateMarket int32

const (
	TradeDateMarket_TradeDateMarket_Unknown TradeDateMarket = 0
	TradeDateMarket_TradeDateMarket_HK      TradeDateMarket = 1
	TradeDateMarket_TradeDateMarket_US      TradeDateMarket = 2
	TradeDateMarket_TradeDateMarket_CN      TradeDateMarket = 3
	TradeDateMarket_TradeDateMarket_NT      TradeDateMarket = 4
	TradeDateMarket_TradeDateMarket_ST      TradeDateMarket = 5
)

var TradeDateMarket_name = map[int32]string{
	0: "TradeDateMarket_Unknown",
	1: "TradeDateMarket_HK",
	2: "TradeDateMarket_US",
	3: "TradeDateMarket_CN",
	4: "TradeDateMarket_NT",
	5: "TradeDateMarket_ST",
}

var TradeDateMarket_value = map[string]int32{
	"TradeDateMarket_Unknown": 0,
	"TradeDateMarket_HK":      1,
	"TradeDateMarket_US":      2,
	"TradeDateMarket_CN":      3,
	"TradeDateMarket_NT":      4,
	"TradeDateMarket_ST":      5,
}

func (x TradeDateMarket) Enum() *TradeDateMarket {
	p := new(TradeDateMarket)
	*p = x
	return p
}

func (x TradeDateMarket) String() string {
	return proto.EnumName(TradeDateMarket_name, int32(x))
}

func (x *TradeDateMarket) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TradeDateMarket_value, data, "TradeDateMarket")
	if err != nil {
		return err
	}
	*x = TradeDateMarket(value)
	return nil
}

func (TradeDateMarket) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{8}
}

//交易日类型
type TradeDateType int32

const (
	TradeDateType_TradeDateType_Whole     TradeDateType = 0
	TradeDateType_TradeDateType_Morning   TradeDateType = 1
	TradeDateType_TradeDateType_Afternoon TradeDateType = 2
)

var TradeDateType_name = map[int32]string{
	0: "TradeDateType_Whole",
	1: "TradeDateType_Morning",
	2: "TradeDateType_Afternoon",
}

var TradeDateType_value = map[string]int32{
	"TradeDateType_Whole":     0,
	"TradeDateType_Morning":   1,
	"TradeDateType_Afternoon": 2,
}

func (x TradeDateType) Enum() *TradeDateType {
	p := new(TradeDateType)
	*p = x
	return p
}

func (x TradeDateType) String() string {
	return proto.EnumName(TradeDateType_name, int32(x))
}

func (x *TradeDateType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TradeDateType_value, data, "TradeDateType")
	if err != nil {
		return err
	}
	*x = TradeDateType(value)
	return nil
}

func (TradeDateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{9}
}

type RehabType int32

const (
	RehabType_RehabType_None     RehabType = 0
	RehabType_RehabType_Forward  RehabType = 1
	RehabType_RehabType_Backward RehabType = 2
)

var RehabType_name = map[int32]string{
	0: "RehabType_None",
	1: "RehabType_Forward",
	2: "RehabType_Backward",
}

var RehabType_value = map[string]int32{
	"RehabType_None":     0,
	"RehabType_Forward":  1,
	"RehabType_Backward": 2,
}

func (x RehabType) Enum() *RehabType {
	p := new(RehabType)
	*p = x
	return p
}

func (x RehabType) String() string {
	return proto.EnumName(RehabType_name, int32(x))
}

func (x *RehabType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RehabType_value, data, "RehabType")
	if err != nil {
		return err
	}
	*x = RehabType(value)
	return nil
}

func (RehabType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{10}
}

//枚举值兼容旧协议定义
type KLType int32

const (
	KLType_KLType_Unknown KLType = 0
	KLType_KLType_1Min    KLType = 1
	KLType_KLType_Day     KLType = 2
	KLType_KLType_Week    KLType = 3
	KLType_KLType_Month   KLType = 4
	KLType_KLType_Year    KLType = 5
	KLType_KLType_5Min    KLType = 6
	KLType_KLType_15Min   KLType = 7
	KLType_KLType_30Min   KLType = 8
	KLType_KLType_60Min   KLType = 9
	KLType_KLType_3Min    KLType = 10
	KLType_KLType_Quarter KLType = 11
)

var KLType_name = map[int32]string{
	0:  "KLType_Unknown",
	1:  "KLType_1Min",
	2:  "KLType_Day",
	3:  "KLType_Week",
	4:  "KLType_Month",
	5:  "KLType_Year",
	6:  "KLType_5Min",
	7:  "KLType_15Min",
	8:  "KLType_30Min",
	9:  "KLType_60Min",
	10: "KLType_3Min",
	11: "KLType_Quarter",
}

var KLType_value = map[string]int32{
	"KLType_Unknown": 0,
	"KLType_1Min":    1,
	"KLType_Day":     2,
	"KLType_Week":    3,
	"KLType_Month":   4,
	"KLType_Year":    5,
	"KLType_5Min":    6,
	"KLType_15Min":   7,
	"KLType_30Min":   8,
	"KLType_60Min":   9,
	"KLType_3Min":    10,
	"KLType_Quarter": 11,
}

func (x KLType) Enum() *KLType {
	p := new(KLType)
	*p = x
	return p
}

func (x KLType) String() string {
	return proto.EnumName(KLType_name, int32(x))
}

func (x *KLType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KLType_value, data, "KLType")
	if err != nil {
		return err
	}
	*x = KLType(value)
	return nil
}

func (KLType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{11}
}

type KLFields int32

const (
	KLFields_KLFields_None         KLFields = 0
	KLFields_KLFields_High         KLFields = 1
	KLFields_KLFields_Open         KLFields = 2
	KLFields_KLFields_Low          KLFields = 4
	KLFields_KLFields_Close        KLFields = 8
	KLFields_KLFields_LastClose    KLFields = 16
	KLFields_KLFields_Volume       KLFields = 32
	KLFields_KLFields_Turnover     KLFields = 64
	KLFields_KLFields_TurnoverRate KLFields = 128
	KLFields_KLFields_PE           KLFields = 256
	KLFields_KLFields_ChangeRate   KLFields = 512
)

var KLFields_name = map[int32]string{
	0:   "KLFields_None",
	1:   "KLFields_High",
	2:   "KLFields_Open",
	4:   "KLFields_Low",
	8:   "KLFields_Close",
	16:  "KLFields_LastClose",
	32:  "KLFields_Volume",
	64:  "KLFields_Turnover",
	128: "KLFields_TurnoverRate",
	256: "KLFields_PE",
	512: "KLFields_ChangeRate",
}

var KLFields_value = map[string]int32{
	"KLFields_None":         0,
	"KLFields_High":         1,
	"KLFields_Open":         2,
	"KLFields_Low":          4,
	"KLFields_Close":        8,
	"KLFields_LastClose":    16,
	"KLFields_Volume":       32,
	"KLFields_Turnover":     64,
	"KLFields_TurnoverRate": 128,
	"KLFields_PE":           256,
	"KLFields_ChangeRate":   512,
}

func (x KLFields) Enum() *KLFields {
	p := new(KLFields)
	*p = x
	return p
}

func (x KLFields) String() string {
	return proto.EnumName(KLFields_name, int32(x))
}

func (x *KLFields) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KLFields_value, data, "KLFields")
	if err != nil {
		return err
	}
	*x = KLFields(value)
	return nil
}

func (KLFields) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{12}
}

//订阅类型
//枚举值兼容旧协议定义
type SubType int32

const (
	SubType_SubType_None        SubType = 0
	SubType_SubType_Basic       SubType = 1
	SubType_SubType_OrderBook   SubType = 2
	SubType_SubType_Ticker      SubType = 4
	SubType_SubType_RT          SubType = 5
	SubType_SubType_KL_Day      SubType = 6
	SubType_SubType_KL_5Min     SubType = 7
	SubType_SubType_KL_15Min    SubType = 8
	SubType_SubType_KL_30Min    SubType = 9
	SubType_SubType_KL_60Min    SubType = 10
	SubType_SubType_KL_1Min     SubType = 11
	SubType_SubType_KL_Week     SubType = 12
	SubType_SubType_KL_Month    SubType = 13
	SubType_SubType_Broker      SubType = 14
	SubType_SubType_KL_Qurater  SubType = 15
	SubType_SubType_KL_Year     SubType = 16
	SubType_SubType_KL_3Min     SubType = 17
	SubType_SubType_OrderDetail SubType = 18
)

var SubType_name = map[int32]string{
	0:  "SubType_None",
	1:  "SubType_Basic",
	2:  "SubType_OrderBook",
	4:  "SubType_Ticker",
	5:  "SubType_RT",
	6:  "SubType_KL_Day",
	7:  "SubType_KL_5Min",
	8:  "SubType_KL_15Min",
	9:  "SubType_KL_30Min",
	10: "SubType_KL_60Min",
	11: "SubType_KL_1Min",
	12: "SubType_KL_Week",
	13: "SubType_KL_Month",
	14: "SubType_Broker",
	15: "SubType_KL_Qurater",
	16: "SubType_KL_Year",
	17: "SubType_KL_3Min",
	18: "SubType_OrderDetail",
}

var SubType_value = map[string]int32{
	"SubType_None":        0,
	"SubType_Basic":       1,
	"SubType_OrderBook":   2,
	"SubType_Ticker":      4,
	"SubType_RT":          5,
	"SubType_KL_Day":      6,
	"SubType_KL_5Min":     7,
	"SubType_KL_15Min":    8,
	"SubType_KL_30Min":    9,
	"SubType_KL_60Min":    10,
	"SubType_KL_1Min":     11,
	"SubType_KL_Week":     12,
	"SubType_KL_Month":    13,
	"SubType_Broker":      14,
	"SubType_KL_Qurater":  15,
	"SubType_KL_Year":     16,
	"SubType_KL_3Min":     17,
	"SubType_OrderDetail": 18,
}

func (x SubType) Enum() *SubType {
	p := new(SubType)
	*p = x
	return p
}

func (x SubType) String() string {
	return proto.EnumName(SubType_name, int32(x))
}

func (x *SubType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SubType_value, data, "SubType")
	if err != nil {
		return err
	}
	*x = SubType(value)
	return nil
}

func (SubType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{13}
}

type TickerDirection int32

const (
	TickerDirection_TickerDirection_Unknown TickerDirection = 0
	TickerDirection_TickerDirection_Bid     TickerDirection = 1
	TickerDirection_TickerDirection_Ask     TickerDirection = 2
	TickerDirection_TickerDirection_Neutral TickerDirection = 3
)

var TickerDirection_name = map[int32]string{
	0: "TickerDirection_Unknown",
	1: "TickerDirection_Bid",
	2: "TickerDirection_Ask",
	3: "TickerDirection_Neutral",
}

var TickerDirection_value = map[string]int32{
	"TickerDirection_Unknown": 0,
	"TickerDirection_Bid":     1,
	"TickerDirection_Ask":     2,
	"TickerDirection_Neutral": 3,
}

func (x TickerDirection) Enum() *TickerDirection {
	p := new(TickerDirection)
	*p = x
	return p
}

func (x TickerDirection) String() string {
	return proto.EnumName(TickerDirection_name, int32(x))
}

func (x *TickerDirection) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TickerDirection_value, data, "TickerDirection")
	if err != nil {
		return err
	}
	*x = TickerDirection(value)
	return nil
}

func (TickerDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{14}
}

type TickerType int32

const (
	TickerType_TickerType_Unknown                 TickerType = 0
	TickerType_TickerType_Automatch               TickerType = 1
	TickerType_TickerType_Late                    TickerType = 2
	TickerType_TickerType_NoneAutomatch           TickerType = 3
	TickerType_TickerType_InterAutomatch          TickerType = 4
	TickerType_TickerType_InterNoneAutomatch      TickerType = 5
	TickerType_TickerType_OddLot                  TickerType = 6
	TickerType_TickerType_Auction                 TickerType = 7
	TickerType_TickerType_Bulk                    TickerType = 8
	TickerType_TickerType_Crash                   TickerType = 9
	TickerType_TickerType_CrossMarket             TickerType = 10
	TickerType_TickerType_BulkSold                TickerType = 11
	TickerType_TickerType_FreeOnBoard             TickerType = 12
	TickerType_TickerType_Rule127Or155            TickerType = 13
	TickerType_TickerType_Delay                   TickerType = 14
	TickerType_TickerType_MarketCenterClosePrice  TickerType = 15
	TickerType_TickerType_NextDay                 TickerType = 16
	TickerType_TickerType_MarketCenterOpening     TickerType = 17
	TickerType_TickerType_PriorReferencePrice     TickerType = 18
	TickerType_TickerType_MarketCenterOpenPrice   TickerType = 19
	TickerType_TickerType_Seller                  TickerType = 20
	TickerType_TickerType_T                       TickerType = 21
	TickerType_TickerType_ExtendedTradingHours    TickerType = 22
	TickerType_TickerType_Contingent              TickerType = 23
	TickerType_TickerType_AvgPrice                TickerType = 24
	TickerType_TickerType_OTCSold                 TickerType = 25
	TickerType_TickerType_OddLotCrossMarket       TickerType = 26
	TickerType_TickerType_DerivativelyPriced      TickerType = 27
	TickerType_TickerType_ReOpeningPriced         TickerType = 28
	TickerType_TickerType_ClosingPriced           TickerType = 29
	TickerType_TickerType_ComprehensiveDelayPrice TickerType = 30
)

var TickerType_name = map[int32]string{
	0:  "TickerType_Unknown",
	1:  "TickerType_Automatch",
	2:  "TickerType_Late",
	3:  "TickerType_NoneAutomatch",
	4:  "TickerType_InterAutomatch",
	5:  "TickerType_InterNoneAutomatch",
	6:  "TickerType_OddLot",
	7:  "TickerType_Auction",
	8:  "TickerType_Bulk",
	9:  "TickerType_Crash",
	10: "TickerType_CrossMarket",
	11: "TickerType_BulkSold",
	12: "TickerType_FreeOnBoard",
	13: "TickerType_Rule127Or155",
	14: "TickerType_Delay",
	15: "TickerType_MarketCenterClosePrice",
	16: "TickerType_NextDay",
	17: "TickerType_MarketCenterOpening",
	18: "TickerType_PriorReferencePrice",
	19: "TickerType_MarketCenterOpenPrice",
	20: "TickerType_Seller",
	21: "TickerType_T",
	22: "TickerType_ExtendedTradingHours",
	23: "TickerType_Contingent",
	24: "TickerType_AvgPrice",
	25: "TickerType_OTCSold",
	26: "TickerType_OddLotCrossMarket",
	27: "TickerType_DerivativelyPriced",
	28: "TickerType_ReOpeningPriced",
	29: "TickerType_ClosingPriced",
	30: "TickerType_ComprehensiveDelayPrice",
}

var TickerType_value = map[string]int32{
	"TickerType_Unknown":                 0,
	"TickerType_Automatch":               1,
	"TickerType_Late":                    2,
	"TickerType_NoneAutomatch":           3,
	"TickerType_InterAutomatch":          4,
	"TickerType_InterNoneAutomatch":      5,
	"TickerType_OddLot":                  6,
	"TickerType_Auction":                 7,
	"TickerType_Bulk":                    8,
	"TickerType_Crash":                   9,
	"TickerType_CrossMarket":             10,
	"TickerType_BulkSold":                11,
	"TickerType_FreeOnBoard":             12,
	"TickerType_Rule127Or155":            13,
	"TickerType_Delay":                   14,
	"TickerType_MarketCenterClosePrice":  15,
	"TickerType_NextDay":                 16,
	"TickerType_MarketCenterOpening":     17,
	"TickerType_PriorReferencePrice":     18,
	"TickerType_MarketCenterOpenPrice":   19,
	"TickerType_Seller":                  20,
	"TickerType_T":                       21,
	"TickerType_ExtendedTradingHours":    22,
	"TickerType_Contingent":              23,
	"TickerType_AvgPrice":                24,
	"TickerType_OTCSold":                 25,
	"TickerType_OddLotCrossMarket":       26,
	"TickerType_DerivativelyPriced":      27,
	"TickerType_ReOpeningPriced":         28,
	"TickerType_ClosingPriced":           29,
	"TickerType_ComprehensiveDelayPrice": 30,
}

func (x TickerType) Enum() *TickerType {
	p := new(TickerType)
	*p = x
	return p
}

func (x TickerType) String() string {
	return proto.EnumName(TickerType_name, int32(x))
}

func (x *TickerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TickerType_value, data, "TickerType")
	if err != nil {
		return err
	}
	*x = TickerType(value)
	return nil
}

func (TickerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{15}
}

type DarkStatus int32

const (
	DarkStatus_DarkStatus_None    DarkStatus = 0
	DarkStatus_DarkStatus_Trading DarkStatus = 1
	DarkStatus_DarkStatus_End     DarkStatus = 2
)

var DarkStatus_name = map[int32]string{
	0: "DarkStatus_None",
	1: "DarkStatus_Trading",
	2: "DarkStatus_End",
}

var DarkStatus_value = map[string]int32{
	"DarkStatus_None":    0,
	"DarkStatus_Trading": 1,
	"DarkStatus_End":     2,
}

func (x DarkStatus) Enum() *DarkStatus {
	p := new(DarkStatus)
	*p = x
	return p
}

func (x DarkStatus) String() string {
	return proto.EnumName(DarkStatus_name, int32(x))
}

func (x *DarkStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DarkStatus_value, data, "DarkStatus")
	if err != nil {
		return err
	}
	*x = DarkStatus(value)
	return nil
}

func (DarkStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{16}
}

type SecurityStatus int32

const (
	SecurityStatus_SecurityStatus_Unknown                     SecurityStatus = 0
	SecurityStatus_SecurityStatus_Normal                      SecurityStatus = 1
	SecurityStatus_SecurityStatus_Listing                     SecurityStatus = 2
	SecurityStatus_SecurityStatus_Purchasing                  SecurityStatus = 3
	SecurityStatus_SecurityStatus_Subscribing                 SecurityStatus = 4
	SecurityStatus_SecurityStatus_BeforeDrakTradeOpening      SecurityStatus = 5
	SecurityStatus_SecurityStatus_DrakTrading                 SecurityStatus = 6
	SecurityStatus_SecurityStatus_DrakTradeEnd                SecurityStatus = 7
	SecurityStatus_SecurityStatus_ToBeOpen                    SecurityStatus = 8
	SecurityStatus_SecurityStatus_Suspended                   SecurityStatus = 9
	SecurityStatus_SecurityStatus_Called                      SecurityStatus = 10
	SecurityStatus_SecurityStatus_ExpiredLastTradingDate      SecurityStatus = 11
	SecurityStatus_SecurityStatus_Expired                     SecurityStatus = 12
	SecurityStatus_SecurityStatus_Delisted                    SecurityStatus = 13
	SecurityStatus_SecurityStatus_ChangeToTemporaryCode       SecurityStatus = 14
	SecurityStatus_SecurityStatus_TemporaryCodeTradeEnd       SecurityStatus = 15
	SecurityStatus_SecurityStatus_ChangedPlateTradeEnd        SecurityStatus = 16
	SecurityStatus_SecurityStatus_ChangedCodeTradeEnd         SecurityStatus = 17
	SecurityStatus_SecurityStatus_RecoverableCircuitBreaker   SecurityStatus = 18
	SecurityStatus_SecurityStatus_UnRecoverableCircuitBreaker SecurityStatus = 19
	SecurityStatus_SecurityStatus_AfterCombination            SecurityStatus = 20
	SecurityStatus_SecurityStatus_AfterTransation             SecurityStatus = 21
)

var SecurityStatus_name = map[int32]string{
	0:  "SecurityStatus_Unknown",
	1:  "SecurityStatus_Normal",
	2:  "SecurityStatus_Listing",
	3:  "SecurityStatus_Purchasing",
	4:  "SecurityStatus_Subscribing",
	5:  "SecurityStatus_BeforeDrakTradeOpening",
	6:  "SecurityStatus_DrakTrading",
	7:  "SecurityStatus_DrakTradeEnd",
	8:  "SecurityStatus_ToBeOpen",
	9:  "SecurityStatus_Suspended",
	10: "SecurityStatus_Called",
	11: "SecurityStatus_ExpiredLastTradingDate",
	12: "SecurityStatus_Expired",
	13: "SecurityStatus_Delisted",
	14: "SecurityStatus_ChangeToTemporaryCode",
	15: "SecurityStatus_TemporaryCodeTradeEnd",
	16: "SecurityStatus_ChangedPlateTradeEnd",
	17: "SecurityStatus_ChangedCodeTradeEnd",
	18: "SecurityStatus_RecoverableCircuitBreaker",
	19: "SecurityStatus_UnRecoverableCircuitBreaker",
	20: "SecurityStatus_AfterCombination",
	21: "SecurityStatus_AfterTransation",
}

var SecurityStatus_value = map[string]int32{
	"SecurityStatus_Unknown":                     0,
	"SecurityStatus_Normal":                      1,
	"SecurityStatus_Listing":                     2,
	"SecurityStatus_Purchasing":                  3,
	"SecurityStatus_Subscribing":                 4,
	"SecurityStatus_BeforeDrakTradeOpening":      5,
	"SecurityStatus_DrakTrading":                 6,
	"SecurityStatus_DrakTradeEnd":                7,
	"SecurityStatus_ToBeOpen":                    8,
	"SecurityStatus_Suspended":                   9,
	"SecurityStatus_Called":                      10,
	"SecurityStatus_ExpiredLastTradingDate":      11,
	"SecurityStatus_Expired":                     12,
	"SecurityStatus_Delisted":                    13,
	"SecurityStatus_ChangeToTemporaryCode":       14,
	"SecurityStatus_TemporaryCodeTradeEnd":       15,
	"SecurityStatus_ChangedPlateTradeEnd":        16,
	"SecurityStatus_ChangedCodeTradeEnd":         17,
	"SecurityStatus_RecoverableCircuitBreaker":   18,
	"SecurityStatus_UnRecoverableCircuitBreaker": 19,
	"SecurityStatus_AfterCombination":            20,
	"SecurityStatus_AfterTransation":             21,
}

func (x SecurityStatus) Enum() *SecurityStatus {
	p := new(SecurityStatus)
	*p = x
	return p
}

func (x SecurityStatus) String() string {
	return proto.EnumName(SecurityStatus_name, int32(x))
}

func (x *SecurityStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SecurityStatus_value, data, "SecurityStatus")
	if err != nil {
		return err
	}
	*x = SecurityStatus(value)
	return nil
}

func (SecurityStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{17}
}

type HolderCategory int32

const (
	HolderCategory_HolderCategory_Unknow        HolderCategory = 0
	HolderCategory_HolderCategory_Agency        HolderCategory = 1
	HolderCategory_HolderCategory_Fund          HolderCategory = 2
	HolderCategory_HolderCategory_SeniorManager HolderCategory = 3
)

var HolderCategory_name = map[int32]string{
	0: "HolderCategory_Unknow",
	1: "HolderCategory_Agency",
	2: "HolderCategory_Fund",
	3: "HolderCategory_SeniorManager",
}

var HolderCategory_value = map[string]int32{
	"HolderCategory_Unknow":        0,
	"HolderCategory_Agency":        1,
	"HolderCategory_Fund":          2,
	"HolderCategory_SeniorManager": 3,
}

func (x HolderCategory) Enum() *HolderCategory {
	p := new(HolderCategory)
	*p = x
	return p
}

func (x HolderCategory) String() string {
	return proto.EnumName(HolderCategory_name, int32(x))
}

func (x *HolderCategory) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HolderCategory_value, data, "HolderCategory")
	if err != nil {
		return err
	}
	*x = HolderCategory(value)
	return nil
}

func (HolderCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{18}
}

//推送数据的分类，目前只有逐笔在使用
type PushDataType int32

const (
	PushDataType_PushDataType_Unknow    PushDataType = 0
	PushDataType_PushDataType_Realtime  PushDataType = 1
	PushDataType_PushDataType_ByDisConn PushDataType = 2
	PushDataType_PushDataType_Cache     PushDataType = 3
)

var PushDataType_name = map[int32]string{
	0: "PushDataType_Unknow",
	1: "PushDataType_Realtime",
	2: "PushDataType_ByDisConn",
	3: "PushDataType_Cache",
}

var PushDataType_value = map[string]int32{
	"PushDataType_Unknow":    0,
	"PushDataType_Realtime":  1,
	"PushDataType_ByDisConn": 2,
	"PushDataType_Cache":     3,
}

func (x PushDataType) Enum() *PushDataType {
	p := new(PushDataType)
	*p = x
	return p
}

func (x PushDataType) String() string {
	return proto.EnumName(PushDataType_name, int32(x))
}

func (x *PushDataType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PushDataType_value, data, "PushDataType")
	if err != nil {
		return err
	}
	*x = PushDataType(value)
	return nil
}

func (PushDataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{19}
}

//窝轮排序
type SortField int32

const (
	SortField_SortField_Unknow         SortField = 0
	SortField_SortField_Code           SortField = 1
	SortField_SortField_CurPrice       SortField = 2
	SortField_SortField_PriceChangeVal SortField = 3
	SortField_SortField_ChangeRate     SortField = 4
	SortField_SortField_Status         SortField = 5
	SortField_SortField_BidPrice       SortField = 6
	SortField_SortField_AskPrice       SortField = 7
	SortField_SortField_BidVol         SortField = 8
	SortField_SortField_AskVol         SortField = 9
	SortField_SortField_Volume         SortField = 10
	SortField_SortField_Turnover       SortField = 11
	SortField_SortField_Amplitude      SortField = 30
	//以下排序字段只支持用于Qot_GetWarrant协议
	SortField_SortField_Score             SortField = 12
	SortField_SortField_Premium           SortField = 13
	SortField_SortField_EffectiveLeverage SortField = 14
	SortField_SortField_Delta             SortField = 15
	SortField_SortField_ImpliedVolatility SortField = 16
	SortField_SortField_Type              SortField = 17
	SortField_SortField_StrikePrice       SortField = 18
	SortField_SortField_BreakEvenPoint    SortField = 19
	SortField_SortField_MaturityTime      SortField = 20
	SortField_SortField_ListTime          SortField = 21
	SortField_SortField_LastTradeTime     SortField = 22
	SortField_SortField_Leverage          SortField = 23
	SortField_SortField_InOutMoney        SortField = 24
	SortField_SortField_RecoveryPrice     SortField = 25
	SortField_SortField_ChangePrice       SortField = 26
	SortField_SortField_Change            SortField = 27
	SortField_SortField_StreetRate        SortField = 28
	SortField_SortField_StreetVol         SortField = 29
	SortField_SortField_WarrantName       SortField = 31
	SortField_SortField_Issuer            SortField = 32
	SortField_SortField_LotSize           SortField = 33
	SortField_SortField_IssueSize         SortField = 34
	SortField_SortField_UpperStrikePrice  SortField = 45
	SortField_SortField_LowerStrikePrice  SortField = 46
	SortField_SortField_InLinePriceStatus SortField = 47
	//以下排序字段只支持用于Qot_GetPlateSecurity协议，并仅支持美股
	SortField_SortField_PreCurPrice         SortField = 35
	SortField_SortField_AfterCurPrice       SortField = 36
	SortField_SortField_PrePriceChangeVal   SortField = 37
	SortField_SortField_AfterPriceChangeVal SortField = 38
	SortField_SortField_PreChangeRate       SortField = 39
	SortField_SortField_AfterChangeRate     SortField = 40
	SortField_SortField_PreAmplitude        SortField = 41
	SortField_SortField_AfterAmplitude      SortField = 42
	SortField_SortField_PreTurnover         SortField = 43
	SortField_SortField_AfterTurnover       SortField = 44
	//以下排序字段只支持用于Qot_GetPlateSecurity协议，并仅支持期货
	SortField_SortField_LastSettlePrice SortField = 48
	SortField_SortField_Position        SortField = 49
	SortField_SortField_PositionChange  SortField = 50
)

var SortField_name = map[int32]string{
	0:  "SortField_Unknow",
	1:  "SortField_Code",
	2:  "SortField_CurPrice",
	3:  "SortField_PriceChangeVal",
	4:  "SortField_ChangeRate",
	5:  "SortField_Status",
	6:  "SortField_BidPrice",
	7:  "SortField_AskPrice",
	8:  "SortField_BidVol",
	9:  "SortField_AskVol",
	10: "SortField_Volume",
	11: "SortField_Turnover",
	30: "SortField_Amplitude",
	12: "SortField_Score",
	13: "SortField_Premium",
	14: "SortField_EffectiveLeverage",
	15: "SortField_Delta",
	16: "SortField_ImpliedVolatility",
	17: "SortField_Type",
	18: "SortField_StrikePrice",
	19: "SortField_BreakEvenPoint",
	20: "SortField_MaturityTime",
	21: "SortField_ListTime",
	22: "SortField_LastTradeTime",
	23: "SortField_Leverage",
	24: "SortField_InOutMoney",
	25: "SortField_RecoveryPrice",
	26: "SortField_ChangePrice",
	27: "SortField_Change",
	28: "SortField_StreetRate",
	29: "SortField_StreetVol",
	31: "SortField_WarrantName",
	32: "SortField_Issuer",
	33: "SortField_LotSize",
	34: "SortField_IssueSize",
	45: "SortField_UpperStrikePrice",
	46: "SortField_LowerStrikePrice",
	47: "SortField_InLinePriceStatus",
	35: "SortField_PreCurPrice",
	36: "SortField_AfterCurPrice",
	37: "SortField_PrePriceChangeVal",
	38: "SortField_AfterPriceChangeVal",
	39: "SortField_PreChangeRate",
	40: "SortField_AfterChangeRate",
	41: "SortField_PreAmplitude",
	42: "SortField_AfterAmplitude",
	43: "SortField_PreTurnover",
	44: "SortField_AfterTurnover",
	48: "SortField_LastSettlePrice",
	49: "SortField_Position",
	50: "SortField_PositionChange",
}

var SortField_value = map[string]int32{
	"SortField_Unknow":              0,
	"SortField_Code":                1,
	"SortField_CurPrice":            2,
	"SortField_PriceChangeVal":      3,
	"SortField_ChangeRate":          4,
	"SortField_Status":              5,
	"SortField_BidPrice":            6,
	"SortField_AskPrice":            7,
	"SortField_BidVol":              8,
	"SortField_AskVol":              9,
	"SortField_Volume":              10,
	"SortField_Turnover":            11,
	"SortField_Amplitude":           30,
	"SortField_Score":               12,
	"SortField_Premium":             13,
	"SortField_EffectiveLeverage":   14,
	"SortField_Delta":               15,
	"SortField_ImpliedVolatility":   16,
	"SortField_Type":                17,
	"SortField_StrikePrice":         18,
	"SortField_BreakEvenPoint":      19,
	"SortField_MaturityTime":        20,
	"SortField_ListTime":            21,
	"SortField_LastTradeTime":       22,
	"SortField_Leverage":            23,
	"SortField_InOutMoney":          24,
	"SortField_RecoveryPrice":       25,
	"SortField_ChangePrice":         26,
	"SortField_Change":              27,
	"SortField_StreetRate":          28,
	"SortField_StreetVol":           29,
	"SortField_WarrantName":         31,
	"SortField_Issuer":              32,
	"SortField_LotSize":             33,
	"SortField_IssueSize":           34,
	"SortField_UpperStrikePrice":    45,
	"SortField_LowerStrikePrice":    46,
	"SortField_InLinePriceStatus":   47,
	"SortField_PreCurPrice":         35,
	"SortField_AfterCurPrice":       36,
	"SortField_PrePriceChangeVal":   37,
	"SortField_AfterPriceChangeVal": 38,
	"SortField_PreChangeRate":       39,
	"SortField_AfterChangeRate":     40,
	"SortField_PreAmplitude":        41,
	"SortField_AfterAmplitude":      42,
	"SortField_PreTurnover":         43,
	"SortField_AfterTurnover":       44,
	"SortField_LastSettlePrice":     48,
	"SortField_Position":            49,
	"SortField_PositionChange":      50,
}

func (x SortField) Enum() *SortField {
	p := new(SortField)
	*p = x
	return p
}

func (x SortField) String() string {
	return proto.EnumName(SortField_name, int32(x))
}

func (x *SortField) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SortField_value, data, "SortField")
	if err != nil {
		return err
	}
	*x = SortField(value)
	return nil
}

func (SortField) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{20}
}

//窝轮发行人
type Issuer int32

const (
	Issuer_Issuer_Unknow Issuer = 0
	Issuer_Issuer_SG     Issuer = 1
	Issuer_Issuer_BP     Issuer = 2
	Issuer_Issuer_CS     Issuer = 3
	Issuer_Issuer_CT     Issuer = 4
	Issuer_Issuer_EA     Issuer = 5
	Issuer_Issuer_GS     Issuer = 6
	Issuer_Issuer_HS     Issuer = 7
	Issuer_Issuer_JP     Issuer = 8
	Issuer_Issuer_MB     Issuer = 9
	Issuer_Issuer_SC     Issuer = 10
	Issuer_Issuer_UB     Issuer = 11
	Issuer_Issuer_BI     Issuer = 12
	Issuer_Issuer_DB     Issuer = 13
	Issuer_Issuer_DC     Issuer = 14
	Issuer_Issuer_ML     Issuer = 15
	Issuer_Issuer_NM     Issuer = 16
	Issuer_Issuer_RB     Issuer = 17
	Issuer_Issuer_RS     Issuer = 18
	Issuer_Issuer_BC     Issuer = 19
	Issuer_Issuer_HT     Issuer = 20
	Issuer_Issuer_VT     Issuer = 21
	Issuer_Issuer_KC     Issuer = 22
	Issuer_Issuer_MS     Issuer = 23
)

var Issuer_name = map[int32]string{
	0:  "Issuer_Unknow",
	1:  "Issuer_SG",
	2:  "Issuer_BP",
	3:  "Issuer_CS",
	4:  "Issuer_CT",
	5:  "Issuer_EA",
	6:  "Issuer_GS",
	7:  "Issuer_HS",
	8:  "Issuer_JP",
	9:  "Issuer_MB",
	10: "Issuer_SC",
	11: "Issuer_UB",
	12: "Issuer_BI",
	13: "Issuer_DB",
	14: "Issuer_DC",
	15: "Issuer_ML",
	16: "Issuer_NM",
	17: "Issuer_RB",
	18: "Issuer_RS",
	19: "Issuer_BC",
	20: "Issuer_HT",
	21: "Issuer_VT",
	22: "Issuer_KC",
	23: "Issuer_MS",
}

var Issuer_value = map[string]int32{
	"Issuer_Unknow": 0,
	"Issuer_SG":     1,
	"Issuer_BP":     2,
	"Issuer_CS":     3,
	"Issuer_CT":     4,
	"Issuer_EA":     5,
	"Issuer_GS":     6,
	"Issuer_HS":     7,
	"Issuer_JP":     8,
	"Issuer_MB":     9,
	"Issuer_SC":     10,
	"Issuer_UB":     11,
	"Issuer_BI":     12,
	"Issuer_DB":     13,
	"Issuer_DC":     14,
	"Issuer_ML":     15,
	"Issuer_NM":     16,
	"Issuer_RB":     17,
	"Issuer_RS":     18,
	"Issuer_BC":     19,
	"Issuer_HT":     20,
	"Issuer_VT":     21,
	"Issuer_KC":     22,
	"Issuer_MS":     23,
}

func (x Issuer) Enum() *Issuer {
	p := new(Issuer)
	*p = x
	return p
}

func (x Issuer) String() string {
	return proto.EnumName(Issuer_name, int32(x))
}

func (x *Issuer) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Issuer_value, data, "Issuer")
	if err != nil {
		return err
	}
	*x = Issuer(value)
	return nil
}

func (Issuer) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{21}
}

//窝轮上市日
type IpoPeriod int32

const (
	IpoPeriod_IpoPeriod_Unknow    IpoPeriod = 0
	IpoPeriod_IpoPeriod_Today     IpoPeriod = 1
	IpoPeriod_IpoPeriod_Tomorrow  IpoPeriod = 2
	IpoPeriod_IpoPeriod_Nextweek  IpoPeriod = 3
	IpoPeriod_IpoPeriod_Lastweek  IpoPeriod = 4
	IpoPeriod_IpoPeriod_Lastmonth IpoPeriod = 5
)

var IpoPeriod_name = map[int32]string{
	0: "IpoPeriod_Unknow",
	1: "IpoPeriod_Today",
	2: "IpoPeriod_Tomorrow",
	3: "IpoPeriod_Nextweek",
	4: "IpoPeriod_Lastweek",
	5: "IpoPeriod_Lastmonth",
}

var IpoPeriod_value = map[string]int32{
	"IpoPeriod_Unknow":    0,
	"IpoPeriod_Today":     1,
	"IpoPeriod_Tomorrow":  2,
	"IpoPeriod_Nextweek":  3,
	"IpoPeriod_Lastweek":  4,
	"IpoPeriod_Lastmonth": 5,
}

func (x IpoPeriod) Enum() *IpoPeriod {
	p := new(IpoPeriod)
	*p = x
	return p
}

func (x IpoPeriod) String() string {
	return proto.EnumName(IpoPeriod_name, int32(x))
}

func (x *IpoPeriod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IpoPeriod_value, data, "IpoPeriod")
	if err != nil {
		return err
	}
	*x = IpoPeriod(value)
	return nil
}

func (IpoPeriod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{22}
}

//窝轮价外/内,界内证表示界内界外
type PriceType int32

const (
	PriceType_PriceType_Unknow  PriceType = 0
	PriceType_PriceType_Outside PriceType = 1
	PriceType_PriceType_WithIn  PriceType = 2
)

var PriceType_name = map[int32]string{
	0: "PriceType_Unknow",
	1: "PriceType_Outside",
	2: "PriceType_WithIn",
}

var PriceType_value = map[string]int32{
	"PriceType_Unknow":  0,
	"PriceType_Outside": 1,
	"PriceType_WithIn":  2,
}

func (x PriceType) Enum() *PriceType {
	p := new(PriceType)
	*p = x
	return p
}

func (x PriceType) String() string {
	return proto.EnumName(PriceType_name, int32(x))
}

func (x *PriceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PriceType_value, data, "PriceType")
	if err != nil {
		return err
	}
	*x = PriceType(value)
	return nil
}

func (PriceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{23}
}

//窝轮状态
type WarrantStatus int32

const (
	WarrantStatus_WarrantStatus_Unknow         WarrantStatus = 0
	WarrantStatus_WarrantStatus_Normal         WarrantStatus = 1
	WarrantStatus_WarrantStatus_Suspend        WarrantStatus = 2
	WarrantStatus_WarrantStatus_StopTrade      WarrantStatus = 3
	WarrantStatus_WarrantStatus_PendingListing WarrantStatus = 4
)

var WarrantStatus_name = map[int32]string{
	0: "WarrantStatus_Unknow",
	1: "WarrantStatus_Normal",
	2: "WarrantStatus_Suspend",
	3: "WarrantStatus_StopTrade",
	4: "WarrantStatus_PendingListing",
}

var WarrantStatus_value = map[string]int32{
	"WarrantStatus_Unknow":         0,
	"WarrantStatus_Normal":         1,
	"WarrantStatus_Suspend":        2,
	"WarrantStatus_StopTrade":      3,
	"WarrantStatus_PendingListing": 4,
}

func (x WarrantStatus) Enum() *WarrantStatus {
	p := new(WarrantStatus)
	*p = x
	return p
}

func (x WarrantStatus) String() string {
	return proto.EnumName(WarrantStatus_name, int32(x))
}

func (x *WarrantStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WarrantStatus_value, data, "WarrantStatus")
	if err != nil {
		return err
	}
	*x = WarrantStatus(value)
	return nil
}

func (WarrantStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{24}
}

type CompanyAct int32

const (
	CompanyAct_CompanyAct_None       CompanyAct = 0
	CompanyAct_CompanyAct_Split      CompanyAct = 1
	CompanyAct_CompanyAct_Join       CompanyAct = 2
	CompanyAct_CompanyAct_Bonus      CompanyAct = 4
	CompanyAct_CompanyAct_Transfer   CompanyAct = 8
	CompanyAct_CompanyAct_Allot      CompanyAct = 16
	CompanyAct_CompanyAct_Add        CompanyAct = 32
	CompanyAct_CompanyAct_Dividend   CompanyAct = 64
	CompanyAct_CompanyAct_SPDividend CompanyAct = 128
)

var CompanyAct_name = map[int32]string{
	0:   "CompanyAct_None",
	1:   "CompanyAct_Split",
	2:   "CompanyAct_Join",
	4:   "CompanyAct_Bonus",
	8:   "CompanyAct_Transfer",
	16:  "CompanyAct_Allot",
	32:  "CompanyAct_Add",
	64:  "CompanyAct_Dividend",
	128: "CompanyAct_SPDividend",
}

var CompanyAct_value = map[string]int32{
	"CompanyAct_None":       0,
	"CompanyAct_Split":      1,
	"CompanyAct_Join":       2,
	"CompanyAct_Bonus":      4,
	"CompanyAct_Transfer":   8,
	"CompanyAct_Allot":      16,
	"CompanyAct_Add":        32,
	"CompanyAct_Dividend":   64,
	"CompanyAct_SPDividend": 128,
}

func (x CompanyAct) Enum() *CompanyAct {
	p := new(CompanyAct)
	*p = x
	return p
}

func (x CompanyAct) String() string {
	return proto.EnumName(CompanyAct_name, int32(x))
}

func (x *CompanyAct) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CompanyAct_value, data, "CompanyAct")
	if err != nil {
		return err
	}
	*x = CompanyAct(value)
	return nil
}

func (CompanyAct) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{25}
}

//行情权限
type QotRight int32

const (
	QotRight_QotRight_Unknow QotRight = 0
	QotRight_QotRight_Bmp    QotRight = 1
	QotRight_QotRight_Level1 QotRight = 2
	QotRight_QotRight_Level2 QotRight = 3
)

var QotRight_name = map[int32]string{
	0: "QotRight_Unknow",
	1: "QotRight_Bmp",
	2: "QotRight_Level1",
	3: "QotRight_Level2",
}

var QotRight_value = map[string]int32{
	"QotRight_Unknow": 0,
	"QotRight_Bmp":    1,
	"QotRight_Level1": 2,
	"QotRight_Level2": 3,
}

func (x QotRight) Enum() *QotRight {
	p := new(QotRight)
	*p = x
	return p
}

func (x QotRight) String() string {
	return proto.EnumName(QotRight_name, int32(x))
}

func (x *QotRight) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(QotRight_value, data, "QotRight")
	if err != nil {
		return err
	}
	*x = QotRight(value)
	return nil
}

func (QotRight) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{26}
}

//两个字段确定一支股票
type Security struct {
	Market               *int32   `protobuf:"varint,1,req,name=market" json:"market,omitempty"`
	Code                 *string  `protobuf:"bytes,2,req,name=code" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Security) Reset()         { *m = Security{} }
func (m *Security) String() string { return proto.CompactTextString(m) }
func (*Security) ProtoMessage()    {}
func (*Security) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{0}
}

func (m *Security) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Security.Unmarshal(m, b)
}
func (m *Security) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Security.Marshal(b, m, deterministic)
}
func (m *Security) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Security.Merge(m, src)
}
func (m *Security) XXX_Size() int {
	return xxx_messageInfo_Security.Size(m)
}
func (m *Security) XXX_DiscardUnknown() {
	xxx_messageInfo_Security.DiscardUnknown(m)
}

var xxx_messageInfo_Security proto.InternalMessageInfo

func (m *Security) GetMarket() int32 {
	if m != nil && m.Market != nil {
		return *m.Market
	}
	return 0
}

func (m *Security) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

type KLine struct {
	Time                 *string  `protobuf:"bytes,1,req,name=time" json:"time,omitempty"`
	IsBlank              *bool    `protobuf:"varint,2,req,name=isBlank" json:"isBlank,omitempty"`
	HighPrice            *float64 `protobuf:"fixed64,3,opt,name=highPrice" json:"highPrice,omitempty"`
	OpenPrice            *float64 `protobuf:"fixed64,4,opt,name=openPrice" json:"openPrice,omitempty"`
	LowPrice             *float64 `protobuf:"fixed64,5,opt,name=lowPrice" json:"lowPrice,omitempty"`
	ClosePrice           *float64 `protobuf:"fixed64,6,opt,name=closePrice" json:"closePrice,omitempty"`
	LastClosePrice       *float64 `protobuf:"fixed64,7,opt,name=lastClosePrice" json:"lastClosePrice,omitempty"`
	Volume               *int64   `protobuf:"varint,8,opt,name=volume" json:"volume,omitempty"`
	Turnover             *float64 `protobuf:"fixed64,9,opt,name=turnover" json:"turnover,omitempty"`
	TurnoverRate         *float64 `protobuf:"fixed64,10,opt,name=turnoverRate" json:"turnoverRate,omitempty"`
	Pe                   *float64 `protobuf:"fixed64,11,opt,name=pe" json:"pe,omitempty"`
	ChangeRate           *float64 `protobuf:"fixed64,12,opt,name=changeRate" json:"changeRate,omitempty"`
	Timestamp            *float64 `protobuf:"fixed64,13,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KLine) Reset()         { *m = KLine{} }
func (m *KLine) String() string { return proto.CompactTextString(m) }
func (*KLine) ProtoMessage()    {}
func (*KLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{1}
}

func (m *KLine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KLine.Unmarshal(m, b)
}
func (m *KLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KLine.Marshal(b, m, deterministic)
}
func (m *KLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KLine.Merge(m, src)
}
func (m *KLine) XXX_Size() int {
	return xxx_messageInfo_KLine.Size(m)
}
func (m *KLine) XXX_DiscardUnknown() {
	xxx_messageInfo_KLine.DiscardUnknown(m)
}

var xxx_messageInfo_KLine proto.InternalMessageInfo

func (m *KLine) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *KLine) GetIsBlank() bool {
	if m != nil && m.IsBlank != nil {
		return *m.IsBlank
	}
	return false
}

func (m *KLine) GetHighPrice() float64 {
	if m != nil && m.HighPrice != nil {
		return *m.HighPrice
	}
	return 0
}

func (m *KLine) GetOpenPrice() float64 {
	if m != nil && m.OpenPrice != nil {
		return *m.OpenPrice
	}
	return 0
}

func (m *KLine) GetLowPrice() float64 {
	if m != nil && m.LowPrice != nil {
		return *m.LowPrice
	}
	return 0
}

func (m *KLine) GetClosePrice() float64 {
	if m != nil && m.ClosePrice != nil {
		return *m.ClosePrice
	}
	return 0
}

func (m *KLine) GetLastClosePrice() float64 {
	if m != nil && m.LastClosePrice != nil {
		return *m.LastClosePrice
	}
	return 0
}

func (m *KLine) GetVolume() int64 {
	if m != nil && m.Volume != nil {
		return *m.Volume
	}
	return 0
}

func (m *KLine) GetTurnover() float64 {
	if m != nil && m.Turnover != nil {
		return *m.Turnover
	}
	return 0
}

func (m *KLine) GetTurnoverRate() float64 {
	if m != nil && m.TurnoverRate != nil {
		return *m.TurnoverRate
	}
	return 0
}

func (m *KLine) GetPe() float64 {
	if m != nil && m.Pe != nil {
		return *m.Pe
	}
	return 0
}

func (m *KLine) GetChangeRate() float64 {
	if m != nil && m.ChangeRate != nil {
		return *m.ChangeRate
	}
	return 0
}

func (m *KLine) GetTimestamp() float64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type OptionBasicQotExData struct {
	StrikePrice       *float64 `protobuf:"fixed64,1,req,name=strikePrice" json:"strikePrice,omitempty"`
	ContractSize      *int32   `protobuf:"varint,2,req,name=contractSize" json:"contractSize,omitempty"`
	OpenInterest      *int32   `protobuf:"varint,3,req,name=openInterest" json:"openInterest,omitempty"`
	ImpliedVolatility *float64 `protobuf:"fixed64,4,req,name=impliedVolatility" json:"impliedVolatility,omitempty"`
	Premium           *float64 `protobuf:"fixed64,5,req,name=premium" json:"premium,omitempty"`
	Delta             *float64 `protobuf:"fixed64,6,req,name=delta" json:"delta,omitempty"`
	Gamma             *float64 `protobuf:"fixed64,7,req,name=gamma" json:"gamma,omitempty"`
	Vega              *float64 `protobuf:"fixed64,8,req,name=vega" json:"vega,omitempty"`
	Theta             *float64 `protobuf:"fixed64,9,req,name=theta" json:"theta,omitempty"`
	Rho               *float64 `protobuf:"fixed64,10,req,name=rho" json:"rho,omitempty"`
	//以下字段仅支持港股期权
	NetOpenInterest      *int32   `protobuf:"varint,11,opt,name=netOpenInterest" json:"netOpenInterest,omitempty"`
	ExpiryDateDistance   *int32   `protobuf:"varint,12,opt,name=expiryDateDistance" json:"expiryDateDistance,omitempty"`
	ContractNominalValue *float64 `protobuf:"fixed64,13,opt,name=contractNominalValue" json:"contractNominalValue,omitempty"`
	OwnerLotMultiplier   *float64 `protobuf:"fixed64,14,opt,name=ownerLotMultiplier" json:"ownerLotMultiplier,omitempty"`
	OptionAreaType       *int32   `protobuf:"varint,15,opt,name=optionAreaType" json:"optionAreaType,omitempty"`
	ContractMultiplier   *float64 `protobuf:"fixed64,16,opt,name=contractMultiplier" json:"contractMultiplier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OptionBasicQotExData) Reset()         { *m = OptionBasicQotExData{} }
func (m *OptionBasicQotExData) String() string { return proto.CompactTextString(m) }
func (*OptionBasicQotExData) ProtoMessage()    {}
func (*OptionBasicQotExData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{2}
}

func (m *OptionBasicQotExData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OptionBasicQotExData.Unmarshal(m, b)
}
func (m *OptionBasicQotExData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OptionBasicQotExData.Marshal(b, m, deterministic)
}
func (m *OptionBasicQotExData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionBasicQotExData.Merge(m, src)
}
func (m *OptionBasicQotExData) XXX_Size() int {
	return xxx_messageInfo_OptionBasicQotExData.Size(m)
}
func (m *OptionBasicQotExData) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionBasicQotExData.DiscardUnknown(m)
}

var xxx_messageInfo_OptionBasicQotExData proto.InternalMessageInfo

func (m *OptionBasicQotExData) GetStrikePrice() float64 {
	if m != nil && m.StrikePrice != nil {
		return *m.StrikePrice
	}
	return 0
}

func (m *OptionBasicQotExData) GetContractSize() int32 {
	if m != nil && m.ContractSize != nil {
		return *m.ContractSize
	}
	return 0
}

func (m *OptionBasicQotExData) GetOpenInterest() int32 {
	if m != nil && m.OpenInterest != nil {
		return *m.OpenInterest
	}
	return 0
}

func (m *OptionBasicQotExData) GetImpliedVolatility() float64 {
	if m != nil && m.ImpliedVolatility != nil {
		return *m.ImpliedVolatility
	}
	return 0
}

func (m *OptionBasicQotExData) GetPremium() float64 {
	if m != nil && m.Premium != nil {
		return *m.Premium
	}
	return 0
}

func (m *OptionBasicQotExData) GetDelta() float64 {
	if m != nil && m.Delta != nil {
		return *m.Delta
	}
	return 0
}

func (m *OptionBasicQotExData) GetGamma() float64 {
	if m != nil && m.Gamma != nil {
		return *m.Gamma
	}
	return 0
}

func (m *OptionBasicQotExData) GetVega() float64 {
	if m != nil && m.Vega != nil {
		return *m.Vega
	}
	return 0
}

func (m *OptionBasicQotExData) GetTheta() float64 {
	if m != nil && m.Theta != nil {
		return *m.Theta
	}
	return 0
}

func (m *OptionBasicQotExData) GetRho() float64 {
	if m != nil && m.Rho != nil {
		return *m.Rho
	}
	return 0
}

func (m *OptionBasicQotExData) GetNetOpenInterest() int32 {
	if m != nil && m.NetOpenInterest != nil {
		return *m.NetOpenInterest
	}
	return 0
}

func (m *OptionBasicQotExData) GetExpiryDateDistance() int32 {
	if m != nil && m.ExpiryDateDistance != nil {
		return *m.ExpiryDateDistance
	}
	return 0
}

func (m *OptionBasicQotExData) GetContractNominalValue() float64 {
	if m != nil && m.ContractNominalValue != nil {
		return *m.ContractNominalValue
	}
	return 0
}

func (m *OptionBasicQotExData) GetOwnerLotMultiplier() float64 {
	if m != nil && m.OwnerLotMultiplier != nil {
		return *m.OwnerLotMultiplier
	}
	return 0
}

func (m *OptionBasicQotExData) GetOptionAreaType() int32 {
	if m != nil && m.OptionAreaType != nil {
		return *m.OptionAreaType
	}
	return 0
}

func (m *OptionBasicQotExData) GetContractMultiplier() float64 {
	if m != nil && m.ContractMultiplier != nil {
		return *m.ContractMultiplier
	}
	return 0
}

//美股支持盘前盘后数据
//科创板仅支持盘后数据：成交量，成交额
type PreAfterMarketData struct {
	Price                *float64 `protobuf:"fixed64,1,opt,name=price" json:"price,omitempty"`
	HighPrice            *float64 `protobuf:"fixed64,2,opt,name=highPrice" json:"highPrice,omitempty"`
	LowPrice             *float64 `protobuf:"fixed64,3,opt,name=lowPrice" json:"lowPrice,omitempty"`
	Volume               *int64   `protobuf:"varint,4,opt,name=volume" json:"volume,omitempty"`
	Turnover             *float64 `protobuf:"fixed64,5,opt,name=turnover" json:"turnover,omitempty"`
	ChangeVal            *float64 `protobuf:"fixed64,6,opt,name=changeVal" json:"changeVal,omitempty"`
	ChangeRate           *float64 `protobuf:"fixed64,7,opt,name=changeRate" json:"changeRate,omitempty"`
	Amplitude            *float64 `protobuf:"fixed64,8,opt,name=amplitude" json:"amplitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreAfterMarketData) Reset()         { *m = PreAfterMarketData{} }
func (m *PreAfterMarketData) String() string { return proto.CompactTextString(m) }
func (*PreAfterMarketData) ProtoMessage()    {}
func (*PreAfterMarketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{3}
}

func (m *PreAfterMarketData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreAfterMarketData.Unmarshal(m, b)
}
func (m *PreAfterMarketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreAfterMarketData.Marshal(b, m, deterministic)
}
func (m *PreAfterMarketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreAfterMarketData.Merge(m, src)
}
func (m *PreAfterMarketData) XXX_Size() int {
	return xxx_messageInfo_PreAfterMarketData.Size(m)
}
func (m *PreAfterMarketData) XXX_DiscardUnknown() {
	xxx_messageInfo_PreAfterMarketData.DiscardUnknown(m)
}

var xxx_messageInfo_PreAfterMarketData proto.InternalMessageInfo

func (m *PreAfterMarketData) GetPrice() float64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *PreAfterMarketData) GetHighPrice() float64 {
	if m != nil && m.HighPrice != nil {
		return *m.HighPrice
	}
	return 0
}

func (m *PreAfterMarketData) GetLowPrice() float64 {
	if m != nil && m.LowPrice != nil {
		return *m.LowPrice
	}
	return 0
}

func (m *PreAfterMarketData) GetVolume() int64 {
	if m != nil && m.Volume != nil {
		return *m.Volume
	}
	return 0
}

func (m *PreAfterMarketData) GetTurnover() float64 {
	if m != nil && m.Turnover != nil {
		return *m.Turnover
	}
	return 0
}

func (m *PreAfterMarketData) GetChangeVal() float64 {
	if m != nil && m.ChangeVal != nil {
		return *m.ChangeVal
	}
	return 0
}

func (m *PreAfterMarketData) GetChangeRate() float64 {
	if m != nil && m.ChangeRate != nil {
		return *m.ChangeRate
	}
	return 0
}

func (m *PreAfterMarketData) GetAmplitude() float64 {
	if m != nil && m.Amplitude != nil {
		return *m.Amplitude
	}
	return 0
}

type FutureBasicQotExData struct {
	LastSettlePrice      *float64 `protobuf:"fixed64,1,req,name=lastSettlePrice" json:"lastSettlePrice,omitempty"`
	Position             *int32   `protobuf:"varint,2,req,name=position" json:"position,omitempty"`
	PositionChange       *int32   `protobuf:"varint,3,req,name=positionChange" json:"positionChange,omitempty"`
	ExpiryDateDistance   *int32   `protobuf:"varint,4,opt,name=expiryDateDistance" json:"expiryDateDistance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FutureBasicQotExData) Reset()         { *m = FutureBasicQotExData{} }
func (m *FutureBasicQotExData) String() string { return proto.CompactTextString(m) }
func (*FutureBasicQotExData) ProtoMessage()    {}
func (*FutureBasicQotExData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{4}
}

func (m *FutureBasicQotExData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FutureBasicQotExData.Unmarshal(m, b)
}
func (m *FutureBasicQotExData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FutureBasicQotExData.Marshal(b, m, deterministic)
}
func (m *FutureBasicQotExData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FutureBasicQotExData.Merge(m, src)
}
func (m *FutureBasicQotExData) XXX_Size() int {
	return xxx_messageInfo_FutureBasicQotExData.Size(m)
}
func (m *FutureBasicQotExData) XXX_DiscardUnknown() {
	xxx_messageInfo_FutureBasicQotExData.DiscardUnknown(m)
}

var xxx_messageInfo_FutureBasicQotExData proto.InternalMessageInfo

func (m *FutureBasicQotExData) GetLastSettlePrice() float64 {
	if m != nil && m.LastSettlePrice != nil {
		return *m.LastSettlePrice
	}
	return 0
}

func (m *FutureBasicQotExData) GetPosition() int32 {
	if m != nil && m.Position != nil {
		return *m.Position
	}
	return 0
}

func (m *FutureBasicQotExData) GetPositionChange() int32 {
	if m != nil && m.PositionChange != nil {
		return *m.PositionChange
	}
	return 0
}

func (m *FutureBasicQotExData) GetExpiryDateDistance() int32 {
	if m != nil && m.ExpiryDateDistance != nil {
		return *m.ExpiryDateDistance
	}
	return 0
}

type BasicQot struct {
	Security             *Security             `protobuf:"bytes,1,req,name=security" json:"security,omitempty"`
	IsSuspended          *bool                 `protobuf:"varint,2,req,name=isSuspended" json:"isSuspended,omitempty"`
	ListTime             *string               `protobuf:"bytes,3,req,name=listTime" json:"listTime,omitempty"`
	PriceSpread          *float64              `protobuf:"fixed64,4,req,name=priceSpread" json:"priceSpread,omitempty"`
	UpdateTime           *string               `protobuf:"bytes,5,req,name=updateTime" json:"updateTime,omitempty"`
	HighPrice            *float64              `protobuf:"fixed64,6,req,name=highPrice" json:"highPrice,omitempty"`
	OpenPrice            *float64              `protobuf:"fixed64,7,req,name=openPrice" json:"openPrice,omitempty"`
	LowPrice             *float64              `protobuf:"fixed64,8,req,name=lowPrice" json:"lowPrice,omitempty"`
	CurPrice             *float64              `protobuf:"fixed64,9,req,name=curPrice" json:"curPrice,omitempty"`
	LastClosePrice       *float64              `protobuf:"fixed64,10,req,name=lastClosePrice" json:"lastClosePrice,omitempty"`
	Volume               *int64                `protobuf:"varint,11,req,name=volume" json:"volume,omitempty"`
	Turnover             *float64              `protobuf:"fixed64,12,req,name=turnover" json:"turnover,omitempty"`
	TurnoverRate         *float64              `protobuf:"fixed64,13,req,name=turnoverRate" json:"turnoverRate,omitempty"`
	Amplitude            *float64              `protobuf:"fixed64,14,req,name=amplitude" json:"amplitude,omitempty"`
	DarkStatus           *int32                `protobuf:"varint,15,opt,name=darkStatus" json:"darkStatus,omitempty"`
	OptionExData         *OptionBasicQotExData `protobuf:"bytes,16,opt,name=optionExData" json:"optionExData,omitempty"`
	ListTimestamp        *float64              `protobuf:"fixed64,17,opt,name=listTimestamp" json:"listTimestamp,omitempty"`
	UpdateTimestamp      *float64              `protobuf:"fixed64,18,opt,name=updateTimestamp" json:"updateTimestamp,omitempty"`
	PreMarket            *PreAfterMarketData   `protobuf:"bytes,19,opt,name=preMarket" json:"preMarket,omitempty"`
	AfterMarket          *PreAfterMarketData   `protobuf:"bytes,20,opt,name=afterMarket" json:"afterMarket,omitempty"`
	SecStatus            *int32                `protobuf:"varint,21,opt,name=secStatus" json:"secStatus,omitempty"`
	FutureExData         *FutureBasicQotExData `protobuf:"bytes,22,opt,name=futureExData" json:"futureExData,omitempty"`
	AskPrice             *float64              `protobuf:"fixed64,23,opt,name=askPrice" json:"askPrice,omitempty"`
	BidPrice             *float64              `protobuf:"fixed64,24,opt,name=bidPrice" json:"bidPrice,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *BasicQot) Reset()         { *m = BasicQot{} }
func (m *BasicQot) String() string { return proto.CompactTextString(m) }
func (*BasicQot) ProtoMessage()    {}
func (*BasicQot) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{5}
}

func (m *BasicQot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BasicQot.Unmarshal(m, b)
}
func (m *BasicQot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BasicQot.Marshal(b, m, deterministic)
}
func (m *BasicQot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicQot.Merge(m, src)
}
func (m *BasicQot) XXX_Size() int {
	return xxx_messageInfo_BasicQot.Size(m)
}
func (m *BasicQot) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicQot.DiscardUnknown(m)
}

var xxx_messageInfo_BasicQot proto.InternalMessageInfo

func (m *BasicQot) GetSecurity() *Security {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *BasicQot) GetIsSuspended() bool {
	if m != nil && m.IsSuspended != nil {
		return *m.IsSuspended
	}
	return false
}

func (m *BasicQot) GetListTime() string {
	if m != nil && m.ListTime != nil {
		return *m.ListTime
	}
	return ""
}

func (m *BasicQot) GetPriceSpread() float64 {
	if m != nil && m.PriceSpread != nil {
		return *m.PriceSpread
	}
	return 0
}

func (m *BasicQot) GetUpdateTime() string {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return ""
}

func (m *BasicQot) GetHighPrice() float64 {
	if m != nil && m.HighPrice != nil {
		return *m.HighPrice
	}
	return 0
}

func (m *BasicQot) GetOpenPrice() float64 {
	if m != nil && m.OpenPrice != nil {
		return *m.OpenPrice
	}
	return 0
}

func (m *BasicQot) GetLowPrice() float64 {
	if m != nil && m.LowPrice != nil {
		return *m.LowPrice
	}
	return 0
}

func (m *BasicQot) GetCurPrice() float64 {
	if m != nil && m.CurPrice != nil {
		return *m.CurPrice
	}
	return 0
}

func (m *BasicQot) GetLastClosePrice() float64 {
	if m != nil && m.LastClosePrice != nil {
		return *m.LastClosePrice
	}
	return 0
}

func (m *BasicQot) GetVolume() int64 {
	if m != nil && m.Volume != nil {
		return *m.Volume
	}
	return 0
}

func (m *BasicQot) GetTurnover() float64 {
	if m != nil && m.Turnover != nil {
		return *m.Turnover
	}
	return 0
}

func (m *BasicQot) GetTurnoverRate() float64 {
	if m != nil && m.TurnoverRate != nil {
		return *m.TurnoverRate
	}
	return 0
}

func (m *BasicQot) GetAmplitude() float64 {
	if m != nil && m.Amplitude != nil {
		return *m.Amplitude
	}
	return 0
}

func (m *BasicQot) GetDarkStatus() int32 {
	if m != nil && m.DarkStatus != nil {
		return *m.DarkStatus
	}
	return 0
}

func (m *BasicQot) GetOptionExData() *OptionBasicQotExData {
	if m != nil {
		return m.OptionExData
	}
	return nil
}

func (m *BasicQot) GetListTimestamp() float64 {
	if m != nil && m.ListTimestamp != nil {
		return *m.ListTimestamp
	}
	return 0
}

func (m *BasicQot) GetUpdateTimestamp() float64 {
	if m != nil && m.UpdateTimestamp != nil {
		return *m.UpdateTimestamp
	}
	return 0
}

func (m *BasicQot) GetPreMarket() *PreAfterMarketData {
	if m != nil {
		return m.PreMarket
	}
	return nil
}

func (m *BasicQot) GetAfterMarket() *PreAfterMarketData {
	if m != nil {
		return m.AfterMarket
	}
	return nil
}

func (m *BasicQot) GetSecStatus() int32 {
	if m != nil && m.SecStatus != nil {
		return *m.SecStatus
	}
	return 0
}

func (m *BasicQot) GetFutureExData() *FutureBasicQotExData {
	if m != nil {
		return m.FutureExData
	}
	return nil
}

func (m *BasicQot) GetAskPrice() float64 {
	if m != nil && m.AskPrice != nil {
		return *m.AskPrice
	}
	return 0
}

func (m *BasicQot) GetBidPrice() float64 {
	if m != nil && m.BidPrice != nil {
		return *m.BidPrice
	}
	return 0
}

type TimeShare struct {
	Time                 *string  `protobuf:"bytes,1,req,name=time" json:"time,omitempty"`
	Minute               *int32   `protobuf:"varint,2,req,name=minute" json:"minute,omitempty"`
	IsBlank              *bool    `protobuf:"varint,3,req,name=isBlank" json:"isBlank,omitempty"`
	Price                *float64 `protobuf:"fixed64,4,opt,name=price" json:"price,omitempty"`
	LastClosePrice       *float64 `protobuf:"fixed64,5,opt,name=lastClosePrice" json:"lastClosePrice,omitempty"`
	AvgPrice             *float64 `protobuf:"fixed64,6,opt,name=avgPrice" json:"avgPrice,omitempty"`
	Volume               *int64   `protobuf:"varint,7,opt,name=volume" json:"volume,omitempty"`
	Turnover             *float64 `protobuf:"fixed64,8,opt,name=turnover" json:"turnover,omitempty"`
	Timestamp            *float64 `protobuf:"fixed64,9,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeShare) Reset()         { *m = TimeShare{} }
func (m *TimeShare) String() string { return proto.CompactTextString(m) }
func (*TimeShare) ProtoMessage()    {}
func (*TimeShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{6}
}

func (m *TimeShare) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeShare.Unmarshal(m, b)
}
func (m *TimeShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeShare.Marshal(b, m, deterministic)
}
func (m *TimeShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeShare.Merge(m, src)
}
func (m *TimeShare) XXX_Size() int {
	return xxx_messageInfo_TimeShare.Size(m)
}
func (m *TimeShare) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeShare.DiscardUnknown(m)
}

var xxx_messageInfo_TimeShare proto.InternalMessageInfo

func (m *TimeShare) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *TimeShare) GetMinute() int32 {
	if m != nil && m.Minute != nil {
		return *m.Minute
	}
	return 0
}

func (m *TimeShare) GetIsBlank() bool {
	if m != nil && m.IsBlank != nil {
		return *m.IsBlank
	}
	return false
}

func (m *TimeShare) GetPrice() float64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *TimeShare) GetLastClosePrice() float64 {
	if m != nil && m.LastClosePrice != nil {
		return *m.LastClosePrice
	}
	return 0
}

func (m *TimeShare) GetAvgPrice() float64 {
	if m != nil && m.AvgPrice != nil {
		return *m.AvgPrice
	}
	return 0
}

func (m *TimeShare) GetVolume() int64 {
	if m != nil && m.Volume != nil {
		return *m.Volume
	}
	return 0
}

func (m *TimeShare) GetTurnover() float64 {
	if m != nil && m.Turnover != nil {
		return *m.Turnover
	}
	return 0
}

func (m *TimeShare) GetTimestamp() float64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type SecurityStaticBasic struct {
	Security             *Security `protobuf:"bytes,1,req,name=security" json:"security,omitempty"`
	Id                   *int64    `protobuf:"varint,2,req,name=id" json:"id,omitempty"`
	LotSize              *int32    `protobuf:"varint,3,req,name=lotSize" json:"lotSize,omitempty"`
	SecType              *int32    `protobuf:"varint,4,req,name=secType" json:"secType,omitempty"`
	Name                 *string   `protobuf:"bytes,5,req,name=name" json:"name,omitempty"`
	ListTime             *string   `protobuf:"bytes,6,req,name=listTime" json:"listTime,omitempty"`
	Delisting            *bool     `protobuf:"varint,7,opt,name=delisting" json:"delisting,omitempty"`
	ListTimestamp        *float64  `protobuf:"fixed64,8,opt,name=listTimestamp" json:"listTimestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SecurityStaticBasic) Reset()         { *m = SecurityStaticBasic{} }
func (m *SecurityStaticBasic) String() string { return proto.CompactTextString(m) }
func (*SecurityStaticBasic) ProtoMessage()    {}
func (*SecurityStaticBasic) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{7}
}

func (m *SecurityStaticBasic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecurityStaticBasic.Unmarshal(m, b)
}
func (m *SecurityStaticBasic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecurityStaticBasic.Marshal(b, m, deterministic)
}
func (m *SecurityStaticBasic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityStaticBasic.Merge(m, src)
}
func (m *SecurityStaticBasic) XXX_Size() int {
	return xxx_messageInfo_SecurityStaticBasic.Size(m)
}
func (m *SecurityStaticBasic) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityStaticBasic.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityStaticBasic proto.InternalMessageInfo

func (m *SecurityStaticBasic) GetSecurity() *Security {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *SecurityStaticBasic) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SecurityStaticBasic) GetLotSize() int32 {
	if m != nil && m.LotSize != nil {
		return *m.LotSize
	}
	return 0
}

func (m *SecurityStaticBasic) GetSecType() int32 {
	if m != nil && m.SecType != nil {
		return *m.SecType
	}
	return 0
}

func (m *SecurityStaticBasic) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SecurityStaticBasic) GetListTime() string {
	if m != nil && m.ListTime != nil {
		return *m.ListTime
	}
	return ""
}

func (m *SecurityStaticBasic) GetDelisting() bool {
	if m != nil && m.Delisting != nil {
		return *m.Delisting
	}
	return false
}

func (m *SecurityStaticBasic) GetListTimestamp() float64 {
	if m != nil && m.ListTimestamp != nil {
		return *m.ListTimestamp
	}
	return 0
}

type WarrantStaticExData struct {
	Type                 *int32    `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	Owner                *Security `protobuf:"bytes,2,req,name=owner" json:"owner,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *WarrantStaticExData) Reset()         { *m = WarrantStaticExData{} }
func (m *WarrantStaticExData) String() string { return proto.CompactTextString(m) }
func (*WarrantStaticExData) ProtoMessage()    {}
func (*WarrantStaticExData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{8}
}

func (m *WarrantStaticExData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WarrantStaticExData.Unmarshal(m, b)
}
func (m *WarrantStaticExData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WarrantStaticExData.Marshal(b, m, deterministic)
}
func (m *WarrantStaticExData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WarrantStaticExData.Merge(m, src)
}
func (m *WarrantStaticExData) XXX_Size() int {
	return xxx_messageInfo_WarrantStaticExData.Size(m)
}
func (m *WarrantStaticExData) XXX_DiscardUnknown() {
	xxx_messageInfo_WarrantStaticExData.DiscardUnknown(m)
}

var xxx_messageInfo_WarrantStaticExData proto.InternalMessageInfo

func (m *WarrantStaticExData) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *WarrantStaticExData) GetOwner() *Security {
	if m != nil {
		return m.Owner
	}
	return nil
}

type OptionStaticExData struct {
	Type                 *int32    `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	Owner                *Security `protobuf:"bytes,2,req,name=owner" json:"owner,omitempty"`
	StrikeTime           *string   `protobuf:"bytes,3,req,name=strikeTime" json:"strikeTime,omitempty"`
	StrikePrice          *float64  `protobuf:"fixed64,4,req,name=strikePrice" json:"strikePrice,omitempty"`
	Suspend              *bool     `protobuf:"varint,5,req,name=suspend" json:"suspend,omitempty"`
	Market               *string   `protobuf:"bytes,6,req,name=market" json:"market,omitempty"`
	StrikeTimestamp      *float64  `protobuf:"fixed64,7,opt,name=strikeTimestamp" json:"strikeTimestamp,omitempty"`
	IndexOptionType      *int32    `protobuf:"varint,8,opt,name=indexOptionType" json:"indexOptionType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *OptionStaticExData) Reset()         { *m = OptionStaticExData{} }
func (m *OptionStaticExData) String() string { return proto.CompactTextString(m) }
func (*OptionStaticExData) ProtoMessage()    {}
func (*OptionStaticExData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{9}
}

func (m *OptionStaticExData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OptionStaticExData.Unmarshal(m, b)
}
func (m *OptionStaticExData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OptionStaticExData.Marshal(b, m, deterministic)
}
func (m *OptionStaticExData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionStaticExData.Merge(m, src)
}
func (m *OptionStaticExData) XXX_Size() int {
	return xxx_messageInfo_OptionStaticExData.Size(m)
}
func (m *OptionStaticExData) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionStaticExData.DiscardUnknown(m)
}

var xxx_messageInfo_OptionStaticExData proto.InternalMessageInfo

func (m *OptionStaticExData) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *OptionStaticExData) GetOwner() *Security {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *OptionStaticExData) GetStrikeTime() string {
	if m != nil && m.StrikeTime != nil {
		return *m.StrikeTime
	}
	return ""
}

func (m *OptionStaticExData) GetStrikePrice() float64 {
	if m != nil && m.StrikePrice != nil {
		return *m.StrikePrice
	}
	return 0
}

func (m *OptionStaticExData) GetSuspend() bool {
	if m != nil && m.Suspend != nil {
		return *m.Suspend
	}
	return false
}

func (m *OptionStaticExData) GetMarket() string {
	if m != nil && m.Market != nil {
		return *m.Market
	}
	return ""
}

func (m *OptionStaticExData) GetStrikeTimestamp() float64 {
	if m != nil && m.StrikeTimestamp != nil {
		return *m.StrikeTimestamp
	}
	return 0
}

func (m *OptionStaticExData) GetIndexOptionType() int32 {
	if m != nil && m.IndexOptionType != nil {
		return *m.IndexOptionType
	}
	return 0
}

type FutureStaticExData struct {
	LastTradeTime        *string  `protobuf:"bytes,1,req,name=lastTradeTime" json:"lastTradeTime,omitempty"`
	LastTradeTimestamp   *float64 `protobuf:"fixed64,2,opt,name=lastTradeTimestamp" json:"lastTradeTimestamp,omitempty"`
	IsMainContract       *bool    `protobuf:"varint,3,req,name=isMainContract" json:"isMainContract,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FutureStaticExData) Reset()         { *m = FutureStaticExData{} }
func (m *FutureStaticExData) String() string { return proto.CompactTextString(m) }
func (*FutureStaticExData) ProtoMessage()    {}
func (*FutureStaticExData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{10}
}

func (m *FutureStaticExData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FutureStaticExData.Unmarshal(m, b)
}
func (m *FutureStaticExData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FutureStaticExData.Marshal(b, m, deterministic)
}
func (m *FutureStaticExData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FutureStaticExData.Merge(m, src)
}
func (m *FutureStaticExData) XXX_Size() int {
	return xxx_messageInfo_FutureStaticExData.Size(m)
}
func (m *FutureStaticExData) XXX_DiscardUnknown() {
	xxx_messageInfo_FutureStaticExData.DiscardUnknown(m)
}

var xxx_messageInfo_FutureStaticExData proto.InternalMessageInfo

func (m *FutureStaticExData) GetLastTradeTime() string {
	if m != nil && m.LastTradeTime != nil {
		return *m.LastTradeTime
	}
	return ""
}

func (m *FutureStaticExData) GetLastTradeTimestamp() float64 {
	if m != nil && m.LastTradeTimestamp != nil {
		return *m.LastTradeTimestamp
	}
	return 0
}

func (m *FutureStaticExData) GetIsMainContract() bool {
	if m != nil && m.IsMainContract != nil {
		return *m.IsMainContract
	}
	return false
}

type SecurityStaticInfo struct {
	Basic                *SecurityStaticBasic `protobuf:"bytes,1,req,name=basic" json:"basic,omitempty"`
	WarrantExData        *WarrantStaticExData `protobuf:"bytes,2,opt,name=warrantExData" json:"warrantExData,omitempty"`
	OptionExData         *OptionStaticExData  `protobuf:"bytes,3,opt,name=optionExData" json:"optionExData,omitempty"`
	FutureExData         *FutureStaticExData  `protobuf:"bytes,4,opt,name=futureExData" json:"futureExData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SecurityStaticInfo) Reset()         { *m = SecurityStaticInfo{} }
func (m *SecurityStaticInfo) String() string { return proto.CompactTextString(m) }
func (*SecurityStaticInfo) ProtoMessage()    {}
func (*SecurityStaticInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{11}
}

func (m *SecurityStaticInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecurityStaticInfo.Unmarshal(m, b)
}
func (m *SecurityStaticInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecurityStaticInfo.Marshal(b, m, deterministic)
}
func (m *SecurityStaticInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityStaticInfo.Merge(m, src)
}
func (m *SecurityStaticInfo) XXX_Size() int {
	return xxx_messageInfo_SecurityStaticInfo.Size(m)
}
func (m *SecurityStaticInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityStaticInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityStaticInfo proto.InternalMessageInfo

func (m *SecurityStaticInfo) GetBasic() *SecurityStaticBasic {
	if m != nil {
		return m.Basic
	}
	return nil
}

func (m *SecurityStaticInfo) GetWarrantExData() *WarrantStaticExData {
	if m != nil {
		return m.WarrantExData
	}
	return nil
}

func (m *SecurityStaticInfo) GetOptionExData() *OptionStaticExData {
	if m != nil {
		return m.OptionExData
	}
	return nil
}

func (m *SecurityStaticInfo) GetFutureExData() *FutureStaticExData {
	if m != nil {
		return m.FutureExData
	}
	return nil
}

type Broker struct {
	Id                   *int64   `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Pos                  *int32   `protobuf:"varint,3,req,name=pos" json:"pos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Broker) Reset()         { *m = Broker{} }
func (m *Broker) String() string { return proto.CompactTextString(m) }
func (*Broker) ProtoMessage()    {}
func (*Broker) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{12}
}

func (m *Broker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Broker.Unmarshal(m, b)
}
func (m *Broker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Broker.Marshal(b, m, deterministic)
}
func (m *Broker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Broker.Merge(m, src)
}
func (m *Broker) XXX_Size() int {
	return xxx_messageInfo_Broker.Size(m)
}
func (m *Broker) XXX_DiscardUnknown() {
	xxx_messageInfo_Broker.DiscardUnknown(m)
}

var xxx_messageInfo_Broker proto.InternalMessageInfo

func (m *Broker) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Broker) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Broker) GetPos() int32 {
	if m != nil && m.Pos != nil {
		return *m.Pos
	}
	return 0
}

type Ticker struct {
	Time                 *string  `protobuf:"bytes,1,req,name=time" json:"time,omitempty"`
	Sequence             *int64   `protobuf:"varint,2,req,name=sequence" json:"sequence,omitempty"`
	Dir                  *int32   `protobuf:"varint,3,req,name=dir" json:"dir,omitempty"`
	Price                *float64 `protobuf:"fixed64,4,req,name=price" json:"price,omitempty"`
	Volume               *int64   `protobuf:"varint,5,req,name=volume" json:"volume,omitempty"`
	Turnover             *float64 `protobuf:"fixed64,6,req,name=turnover" json:"turnover,omitempty"`
	RecvTime             *float64 `protobuf:"fixed64,7,opt,name=recvTime" json:"recvTime,omitempty"`
	Type                 *int32   `protobuf:"varint,8,opt,name=type" json:"type,omitempty"`
	TypeSign             *int32   `protobuf:"varint,9,opt,name=typeSign" json:"typeSign,omitempty"`
	PushDataType         *int32   `protobuf:"varint,10,opt,name=pushDataType" json:"pushDataType,omitempty"`
	Timestamp            *float64 `protobuf:"fixed64,11,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ticker) Reset()         { *m = Ticker{} }
func (m *Ticker) String() string { return proto.CompactTextString(m) }
func (*Ticker) ProtoMessage()    {}
func (*Ticker) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{13}
}

func (m *Ticker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ticker.Unmarshal(m, b)
}
func (m *Ticker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ticker.Marshal(b, m, deterministic)
}
func (m *Ticker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ticker.Merge(m, src)
}
func (m *Ticker) XXX_Size() int {
	return xxx_messageInfo_Ticker.Size(m)
}
func (m *Ticker) XXX_DiscardUnknown() {
	xxx_messageInfo_Ticker.DiscardUnknown(m)
}

var xxx_messageInfo_Ticker proto.InternalMessageInfo

func (m *Ticker) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *Ticker) GetSequence() int64 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return 0
}

func (m *Ticker) GetDir() int32 {
	if m != nil && m.Dir != nil {
		return *m.Dir
	}
	return 0
}

func (m *Ticker) GetPrice() float64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *Ticker) GetVolume() int64 {
	if m != nil && m.Volume != nil {
		return *m.Volume
	}
	return 0
}

func (m *Ticker) GetTurnover() float64 {
	if m != nil && m.Turnover != nil {
		return *m.Turnover
	}
	return 0
}

func (m *Ticker) GetRecvTime() float64 {
	if m != nil && m.RecvTime != nil {
		return *m.RecvTime
	}
	return 0
}

func (m *Ticker) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Ticker) GetTypeSign() int32 {
	if m != nil && m.TypeSign != nil {
		return *m.TypeSign
	}
	return 0
}

func (m *Ticker) GetPushDataType() int32 {
	if m != nil && m.PushDataType != nil {
		return *m.PushDataType
	}
	return 0
}

func (m *Ticker) GetTimestamp() float64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type OrderBook struct {
	Price                *float64 `protobuf:"fixed64,1,req,name=price" json:"price,omitempty"`
	Volume               *int64   `protobuf:"varint,2,req,name=volume" json:"volume,omitempty"`
	OrederCount          *int32   `protobuf:"varint,3,req,name=orederCount" json:"orederCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderBook) Reset()         { *m = OrderBook{} }
func (m *OrderBook) String() string { return proto.CompactTextString(m) }
func (*OrderBook) ProtoMessage()    {}
func (*OrderBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{14}
}

func (m *OrderBook) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderBook.Unmarshal(m, b)
}
func (m *OrderBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderBook.Marshal(b, m, deterministic)
}
func (m *OrderBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBook.Merge(m, src)
}
func (m *OrderBook) XXX_Size() int {
	return xxx_messageInfo_OrderBook.Size(m)
}
func (m *OrderBook) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBook.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBook proto.InternalMessageInfo

func (m *OrderBook) GetPrice() float64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *OrderBook) GetVolume() int64 {
	if m != nil && m.Volume != nil {
		return *m.Volume
	}
	return 0
}

func (m *OrderBook) GetOrederCount() int32 {
	if m != nil && m.OrederCount != nil {
		return *m.OrederCount
	}
	return 0
}

type OrderDetail struct {
	OrderCount           *int32    `protobuf:"varint,1,req,name=orderCount" json:"orderCount,omitempty"`
	OrderVol             []float64 `protobuf:"fixed64,2,rep,name=orderVol" json:"orderVol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *OrderDetail) Reset()         { *m = OrderDetail{} }
func (m *OrderDetail) String() string { return proto.CompactTextString(m) }
func (*OrderDetail) ProtoMessage()    {}
func (*OrderDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{15}
}

func (m *OrderDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderDetail.Unmarshal(m, b)
}
func (m *OrderDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderDetail.Marshal(b, m, deterministic)
}
func (m *OrderDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderDetail.Merge(m, src)
}
func (m *OrderDetail) XXX_Size() int {
	return xxx_messageInfo_OrderDetail.Size(m)
}
func (m *OrderDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderDetail.DiscardUnknown(m)
}

var xxx_messageInfo_OrderDetail proto.InternalMessageInfo

func (m *OrderDetail) GetOrderCount() int32 {
	if m != nil && m.OrderCount != nil {
		return *m.OrderCount
	}
	return 0
}

func (m *OrderDetail) GetOrderVol() []float64 {
	if m != nil {
		return m.OrderVol
	}
	return nil
}

//持股变动
type ShareHoldingChange struct {
	HolderName           *string  `protobuf:"bytes,1,req,name=holderName" json:"holderName,omitempty"`
	HoldingQty           *float64 `protobuf:"fixed64,2,req,name=holdingQty" json:"holdingQty,omitempty"`
	HoldingRatio         *float64 `protobuf:"fixed64,3,req,name=holdingRatio" json:"holdingRatio,omitempty"`
	ChangeQty            *float64 `protobuf:"fixed64,4,req,name=changeQty" json:"changeQty,omitempty"`
	ChangeRatio          *float64 `protobuf:"fixed64,5,req,name=changeRatio" json:"changeRatio,omitempty"`
	Time                 *string  `protobuf:"bytes,6,req,name=time" json:"time,omitempty"`
	Timestamp            *float64 `protobuf:"fixed64,7,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShareHoldingChange) Reset()         { *m = ShareHoldingChange{} }
func (m *ShareHoldingChange) String() string { return proto.CompactTextString(m) }
func (*ShareHoldingChange) ProtoMessage()    {}
func (*ShareHoldingChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{16}
}

func (m *ShareHoldingChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShareHoldingChange.Unmarshal(m, b)
}
func (m *ShareHoldingChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShareHoldingChange.Marshal(b, m, deterministic)
}
func (m *ShareHoldingChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareHoldingChange.Merge(m, src)
}
func (m *ShareHoldingChange) XXX_Size() int {
	return xxx_messageInfo_ShareHoldingChange.Size(m)
}
func (m *ShareHoldingChange) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareHoldingChange.DiscardUnknown(m)
}

var xxx_messageInfo_ShareHoldingChange proto.InternalMessageInfo

func (m *ShareHoldingChange) GetHolderName() string {
	if m != nil && m.HolderName != nil {
		return *m.HolderName
	}
	return ""
}

func (m *ShareHoldingChange) GetHoldingQty() float64 {
	if m != nil && m.HoldingQty != nil {
		return *m.HoldingQty
	}
	return 0
}

func (m *ShareHoldingChange) GetHoldingRatio() float64 {
	if m != nil && m.HoldingRatio != nil {
		return *m.HoldingRatio
	}
	return 0
}

func (m *ShareHoldingChange) GetChangeQty() float64 {
	if m != nil && m.ChangeQty != nil {
		return *m.ChangeQty
	}
	return 0
}

func (m *ShareHoldingChange) GetChangeRatio() float64 {
	if m != nil && m.ChangeRatio != nil {
		return *m.ChangeRatio
	}
	return 0
}

func (m *ShareHoldingChange) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *ShareHoldingChange) GetTimestamp() float64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type SubInfo struct {
	SubType              *int32      `protobuf:"varint,1,req,name=subType" json:"subType,omitempty"`
	SecurityList         []*Security `protobuf:"bytes,2,rep,name=securityList" json:"securityList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SubInfo) Reset()         { *m = SubInfo{} }
func (m *SubInfo) String() string { return proto.CompactTextString(m) }
func (*SubInfo) ProtoMessage()    {}
func (*SubInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{17}
}

func (m *SubInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubInfo.Unmarshal(m, b)
}
func (m *SubInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubInfo.Marshal(b, m, deterministic)
}
func (m *SubInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubInfo.Merge(m, src)
}
func (m *SubInfo) XXX_Size() int {
	return xxx_messageInfo_SubInfo.Size(m)
}
func (m *SubInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SubInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SubInfo proto.InternalMessageInfo

func (m *SubInfo) GetSubType() int32 {
	if m != nil && m.SubType != nil {
		return *m.SubType
	}
	return 0
}

func (m *SubInfo) GetSecurityList() []*Security {
	if m != nil {
		return m.SecurityList
	}
	return nil
}

type ConnSubInfo struct {
	SubInfoList          []*SubInfo `protobuf:"bytes,1,rep,name=subInfoList" json:"subInfoList,omitempty"`
	UsedQuota            *int32     `protobuf:"varint,2,req,name=usedQuota" json:"usedQuota,omitempty"`
	IsOwnConnData        *bool      `protobuf:"varint,3,req,name=isOwnConnData" json:"isOwnConnData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ConnSubInfo) Reset()         { *m = ConnSubInfo{} }
func (m *ConnSubInfo) String() string { return proto.CompactTextString(m) }
func (*ConnSubInfo) ProtoMessage()    {}
func (*ConnSubInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{18}
}

func (m *ConnSubInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnSubInfo.Unmarshal(m, b)
}
func (m *ConnSubInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnSubInfo.Marshal(b, m, deterministic)
}
func (m *ConnSubInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnSubInfo.Merge(m, src)
}
func (m *ConnSubInfo) XXX_Size() int {
	return xxx_messageInfo_ConnSubInfo.Size(m)
}
func (m *ConnSubInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnSubInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConnSubInfo proto.InternalMessageInfo

func (m *ConnSubInfo) GetSubInfoList() []*SubInfo {
	if m != nil {
		return m.SubInfoList
	}
	return nil
}

func (m *ConnSubInfo) GetUsedQuota() int32 {
	if m != nil && m.UsedQuota != nil {
		return *m.UsedQuota
	}
	return 0
}

func (m *ConnSubInfo) GetIsOwnConnData() bool {
	if m != nil && m.IsOwnConnData != nil {
		return *m.IsOwnConnData
	}
	return false
}

type PlateInfo struct {
	Plate                *Security `protobuf:"bytes,1,req,name=plate" json:"plate,omitempty"`
	Name                 *string   `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	PlateType            *int32    `protobuf:"varint,3,opt,name=plateType" json:"plateType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PlateInfo) Reset()         { *m = PlateInfo{} }
func (m *PlateInfo) String() string { return proto.CompactTextString(m) }
func (*PlateInfo) ProtoMessage()    {}
func (*PlateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{19}
}

func (m *PlateInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlateInfo.Unmarshal(m, b)
}
func (m *PlateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlateInfo.Marshal(b, m, deterministic)
}
func (m *PlateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlateInfo.Merge(m, src)
}
func (m *PlateInfo) XXX_Size() int {
	return xxx_messageInfo_PlateInfo.Size(m)
}
func (m *PlateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlateInfo proto.InternalMessageInfo

func (m *PlateInfo) GetPlate() *Security {
	if m != nil {
		return m.Plate
	}
	return nil
}

func (m *PlateInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PlateInfo) GetPlateType() int32 {
	if m != nil && m.PlateType != nil {
		return *m.PlateType
	}
	return 0
}

type Rehab struct {
	Time                 *string  `protobuf:"bytes,1,req,name=time" json:"time,omitempty"`
	CompanyActFlag       *int64   `protobuf:"varint,2,req,name=companyActFlag" json:"companyActFlag,omitempty"`
	FwdFactorA           *float64 `protobuf:"fixed64,3,req,name=fwdFactorA" json:"fwdFactorA,omitempty"`
	FwdFactorB           *float64 `protobuf:"fixed64,4,req,name=fwdFactorB" json:"fwdFactorB,omitempty"`
	BwdFactorA           *float64 `protobuf:"fixed64,5,req,name=bwdFactorA" json:"bwdFactorA,omitempty"`
	BwdFactorB           *float64 `protobuf:"fixed64,6,req,name=bwdFactorB" json:"bwdFactorB,omitempty"`
	SplitBase            *int32   `protobuf:"varint,7,opt,name=splitBase" json:"splitBase,omitempty"`
	SplitErt             *int32   `protobuf:"varint,8,opt,name=splitErt" json:"splitErt,omitempty"`
	JoinBase             *int32   `protobuf:"varint,9,opt,name=joinBase" json:"joinBase,omitempty"`
	JoinErt              *int32   `protobuf:"varint,10,opt,name=joinErt" json:"joinErt,omitempty"`
	BonusBase            *int32   `protobuf:"varint,11,opt,name=bonusBase" json:"bonusBase,omitempty"`
	BonusErt             *int32   `protobuf:"varint,12,opt,name=bonusErt" json:"bonusErt,omitempty"`
	TransferBase         *int32   `protobuf:"varint,13,opt,name=transferBase" json:"transferBase,omitempty"`
	TransferErt          *int32   `protobuf:"varint,14,opt,name=transferErt" json:"transferErt,omitempty"`
	AllotBase            *int32   `protobuf:"varint,15,opt,name=allotBase" json:"allotBase,omitempty"`
	AllotErt             *int32   `protobuf:"varint,16,opt,name=allotErt" json:"allotErt,omitempty"`
	AllotPrice           *float64 `protobuf:"fixed64,17,opt,name=allotPrice" json:"allotPrice,omitempty"`
	AddBase              *int32   `protobuf:"varint,18,opt,name=addBase" json:"addBase,omitempty"`
	AddErt               *int32   `protobuf:"varint,19,opt,name=addErt" json:"addErt,omitempty"`
	AddPrice             *float64 `protobuf:"fixed64,20,opt,name=addPrice" json:"addPrice,omitempty"`
	Dividend             *float64 `protobuf:"fixed64,21,opt,name=dividend" json:"dividend,omitempty"`
	SpDividend           *float64 `protobuf:"fixed64,22,opt,name=spDividend" json:"spDividend,omitempty"`
	Timestamp            *float64 `protobuf:"fixed64,23,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rehab) Reset()         { *m = Rehab{} }
func (m *Rehab) String() string { return proto.CompactTextString(m) }
func (*Rehab) ProtoMessage()    {}
func (*Rehab) Descriptor() ([]byte, []int) {
	return fileDescriptor_a292a550514e558b, []int{20}
}

func (m *Rehab) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rehab.Unmarshal(m, b)
}
func (m *Rehab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rehab.Marshal(b, m, deterministic)
}
func (m *Rehab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rehab.Merge(m, src)
}
func (m *Rehab) XXX_Size() int {
	return xxx_messageInfo_Rehab.Size(m)
}
func (m *Rehab) XXX_DiscardUnknown() {
	xxx_messageInfo_Rehab.DiscardUnknown(m)
}

var xxx_messageInfo_Rehab proto.InternalMessageInfo

func (m *Rehab) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *Rehab) GetCompanyActFlag() int64 {
	if m != nil && m.CompanyActFlag != nil {
		return *m.CompanyActFlag
	}
	return 0
}

func (m *Rehab) GetFwdFactorA() float64 {
	if m != nil && m.FwdFactorA != nil {
		return *m.FwdFactorA
	}
	return 0
}

func (m *Rehab) GetFwdFactorB() float64 {
	if m != nil && m.FwdFactorB != nil {
		return *m.FwdFactorB
	}
	return 0
}

func (m *Rehab) GetBwdFactorA() float64 {
	if m != nil && m.BwdFactorA != nil {
		return *m.BwdFactorA
	}
	return 0
}

func (m *Rehab) GetBwdFactorB() float64 {
	if m != nil && m.BwdFactorB != nil {
		return *m.BwdFactorB
	}
	return 0
}

func (m *Rehab) GetSplitBase() int32 {
	if m != nil && m.SplitBase != nil {
		return *m.SplitBase
	}
	return 0
}

func (m *Rehab) GetSplitErt() int32 {
	if m != nil && m.SplitErt != nil {
		return *m.SplitErt
	}
	return 0
}

func (m *Rehab) GetJoinBase() int32 {
	if m != nil && m.JoinBase != nil {
		return *m.JoinBase
	}
	return 0
}

func (m *Rehab) GetJoinErt() int32 {
	if m != nil && m.JoinErt != nil {
		return *m.JoinErt
	}
	return 0
}

func (m *Rehab) GetBonusBase() int32 {
	if m != nil && m.BonusBase != nil {
		return *m.BonusBase
	}
	return 0
}

func (m *Rehab) GetBonusErt() int32 {
	if m != nil && m.BonusErt != nil {
		return *m.BonusErt
	}
	return 0
}

func (m *Rehab) GetTransferBase() int32 {
	if m != nil && m.TransferBase != nil {
		return *m.TransferBase
	}
	return 0
}

func (m *Rehab) GetTransferErt() int32 {
	if m != nil && m.TransferErt != nil {
		return *m.TransferErt
	}
	return 0
}

func (m *Rehab) GetAllotBase() int32 {
	if m != nil && m.AllotBase != nil {
		return *m.AllotBase
	}
	return 0
}

func (m *Rehab) GetAllotErt() int32 {
	if m != nil && m.AllotErt != nil {
		return *m.AllotErt
	}
	return 0
}

func (m *Rehab) GetAllotPrice() float64 {
	if m != nil && m.AllotPrice != nil {
		return *m.AllotPrice
	}
	return 0
}

func (m *Rehab) GetAddBase() int32 {
	if m != nil && m.AddBase != nil {
		return *m.AddBase
	}
	return 0
}

func (m *Rehab) GetAddErt() int32 {
	if m != nil && m.AddErt != nil {
		return *m.AddErt
	}
	return 0
}

func (m *Rehab) GetAddPrice() float64 {
	if m != nil && m.AddPrice != nil {
		return *m.AddPrice
	}
	return 0
}

func (m *Rehab) GetDividend() float64 {
	if m != nil && m.Dividend != nil {
		return *m.Dividend
	}
	return 0
}

func (m *Rehab) GetSpDividend() float64 {
	if m != nil && m.SpDividend != nil {
		return *m.SpDividend
	}
	return 0
}

func (m *Rehab) GetTimestamp() float64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterEnum("Qot_Common.QotMarket", QotMarket_name, QotMarket_value)
	proto.RegisterEnum("Qot_Common.SecurityType", SecurityType_name, SecurityType_value)
	proto.RegisterEnum("Qot_Common.PlateSetType", PlateSetType_name, PlateSetType_value)
	proto.RegisterEnum("Qot_Common.WarrantType", WarrantType_name, WarrantType_value)
	proto.RegisterEnum("Qot_Common.OptionType", OptionType_name, OptionType_value)
	proto.RegisterEnum("Qot_Common.IndexOptionType", IndexOptionType_name, IndexOptionType_value)
	proto.RegisterEnum("Qot_Common.OptionAreaType", OptionAreaType_name, OptionAreaType_value)
	proto.RegisterEnum("Qot_Common.QotMarketState", QotMarketState_name, QotMarketState_value)
	proto.RegisterEnum("Qot_Common.TradeDateMarket", TradeDateMarket_name, TradeDateMarket_value)
	proto.RegisterEnum("Qot_Common.TradeDateType", TradeDateType_name, TradeDateType_value)
	proto.RegisterEnum("Qot_Common.RehabType", RehabType_name, RehabType_value)
	proto.RegisterEnum("Qot_Common.KLType", KLType_name, KLType_value)
	proto.RegisterEnum("Qot_Common.KLFields", KLFields_name, KLFields_value)
	proto.RegisterEnum("Qot_Common.SubType", SubType_name, SubType_value)
	proto.RegisterEnum("Qot_Common.TickerDirection", TickerDirection_name, TickerDirection_value)
	proto.RegisterEnum("Qot_Common.TickerType", TickerType_name, TickerType_value)
	proto.RegisterEnum("Qot_Common.DarkStatus", DarkStatus_name, DarkStatus_value)
	proto.RegisterEnum("Qot_Common.SecurityStatus", SecurityStatus_name, SecurityStatus_value)
	proto.RegisterEnum("Qot_Common.HolderCategory", HolderCategory_name, HolderCategory_value)
	proto.RegisterEnum("Qot_Common.PushDataType", PushDataType_name, PushDataType_value)
	proto.RegisterEnum("Qot_Common.SortField", SortField_name, SortField_value)
	proto.RegisterEnum("Qot_Common.Issuer", Issuer_name, Issuer_value)
	proto.RegisterEnum("Qot_Common.IpoPeriod", IpoPeriod_name, IpoPeriod_value)
	proto.RegisterEnum("Qot_Common.PriceType", PriceType_name, PriceType_value)
	proto.RegisterEnum("Qot_Common.WarrantStatus", WarrantStatus_name, WarrantStatus_value)
	proto.RegisterEnum("Qot_Common.CompanyAct", CompanyAct_name, CompanyAct_value)
	proto.RegisterEnum("Qot_Common.QotRight", QotRight_name, QotRight_value)
	proto.RegisterType((*Security)(nil), "Qot_Common.Security")
	proto.RegisterType((*KLine)(nil), "Qot_Common.KLine")
	proto.RegisterType((*OptionBasicQotExData)(nil), "Qot_Common.OptionBasicQotExData")
	proto.RegisterType((*PreAfterMarketData)(nil), "Qot_Common.PreAfterMarketData")
	proto.RegisterType((*FutureBasicQotExData)(nil), "Qot_Common.FutureBasicQotExData")
	proto.RegisterType((*BasicQot)(nil), "Qot_Common.BasicQot")
	proto.RegisterType((*TimeShare)(nil), "Qot_Common.TimeShare")
	proto.RegisterType((*SecurityStaticBasic)(nil), "Qot_Common.SecurityStaticBasic")
	proto.RegisterType((*WarrantStaticExData)(nil), "Qot_Common.WarrantStaticExData")
	proto.RegisterType((*OptionStaticExData)(nil), "Qot_Common.OptionStaticExData")
	proto.RegisterType((*FutureStaticExData)(nil), "Qot_Common.FutureStaticExData")
	proto.RegisterType((*SecurityStaticInfo)(nil), "Qot_Common.SecurityStaticInfo")
	proto.RegisterType((*Broker)(nil), "Qot_Common.Broker")
	proto.RegisterType((*Ticker)(nil), "Qot_Common.Ticker")
	proto.RegisterType((*OrderBook)(nil), "Qot_Common.OrderBook")
	proto.RegisterType((*OrderDetail)(nil), "Qot_Common.OrderDetail")
	proto.RegisterType((*ShareHoldingChange)(nil), "Qot_Common.ShareHoldingChange")
	proto.RegisterType((*SubInfo)(nil), "Qot_Common.SubInfo")
	proto.RegisterType((*ConnSubInfo)(nil), "Qot_Common.ConnSubInfo")
	proto.RegisterType((*PlateInfo)(nil), "Qot_Common.PlateInfo")
	proto.RegisterType((*Rehab)(nil), "Qot_Common.Rehab")
}

func init() {
	proto.RegisterFile("Qot_Common.proto", fileDescriptor_a292a550514e558b)
}

var fileDescriptor_a292a550514e558b = []byte{
	// 4437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x7a, 0x5b, 0x6f, 0x24, 0x49,
	0x56, 0xff, 0xbf, 0x6e, 0x76, 0x55, 0xf8, 0x16, 0x4e, 0xdf, 0x6a, 0xdc, 0x3d, 0x3d, 0xde, 0x9a,
	0xcb, 0xf6, 0xd6, 0x7f, 0x68, 0xa6, 0x7b, 0x34, 0x0b, 0x0f, 0x08, 0xad, 0xab, 0xec, 0xde, 0xf6,
	0xb6, 0x6f, 0x5d, 0xe5, 0xe9, 0x11, 0xac, 0x50, 0x13, 0xae, 0x0c, 0x97, 0x13, 0x67, 0x65, 0xd4,
	0x46, 0x46, 0xda, 0x6d, 0x24, 0xa4, 0x81, 0x7d, 0x41, 0x3c, 0x22, 0x10, 0xd2, 0x0a, 0x24, 0xc4,
	0x03, 0x2f, 0xbc, 0xc2, 0x27, 0x40, 0xe2, 0x0b, 0xf0, 0x86, 0xc4, 0x17, 0xe0, 0x79, 0x79, 0x42,
	0x08, 0x74, 0x4e, 0x44, 0x66, 0x46, 0x44, 0x95, 0x47, 0x08, 0xf1, 0x96, 0xe7, 0x77, 0x4e, 0xdc,
	0x4e, 0x9c, 0xf3, 0x8b, 0x13, 0x99, 0x49, 0xe8, 0x1b, 0xa1, 0xde, 0xf5, 0xc5, 0x64, 0x22, 0x92,
	0x67, 0x53, 0x29, 0x94, 0x08, 0x48, 0x89, 0xec, 0x2e, 0xdb, 0x9a, 0xce, 0x0f, 0x49, 0x73, 0xc8,
	0x47, 0x99, 0x8c, 0xd4, 0x7d, 0xb0, 0x4d, 0x16, 0x26, 0x4c, 0xde, 0x70, 0xd5, 0xae, 0xec, 0x55,
	0x9f, 0x36, 0x06, 0x46, 0x0a, 0x02, 0x52, 0x1f, 0x89, 0x90, 0xb7, 0xab, 0x7b, 0xd5, 0xa7, 0xad,
	0x01, 0x3e, 0x77, 0xfe, 0xa3, 0x4a, 0x1a, 0xaf, 0x8f, 0xa3, 0x84, 0x83, 0x56, 0x45, 0x13, 0x8e,
	0x6d, 0x5a, 0x03, 0x7c, 0x0e, 0xda, 0x64, 0x31, 0x4a, 0x7b, 0x31, 0x4b, 0x6e, 0xb0, 0x51, 0x73,
	0x90, 0x8b, 0xc1, 0x63, 0xd2, 0xba, 0x8e, 0xc6, 0xd7, 0xe7, 0x32, 0x1a, 0xf1, 0x76, 0x6d, 0xaf,
	0xf2, 0xb4, 0x32, 0x28, 0x01, 0xd0, 0x8a, 0x29, 0x4f, 0xb4, 0xb6, 0xae, 0xb5, 0x05, 0x10, 0xec,
	0x92, 0x66, 0x2c, 0xee, 0xb4, 0xb2, 0x81, 0xca, 0x42, 0x0e, 0x9e, 0x10, 0x32, 0x8a, 0x45, 0xca,
	0xb5, 0x76, 0x01, 0xb5, 0x16, 0x12, 0x7c, 0x46, 0x56, 0x63, 0x96, 0xaa, 0x7e, 0x69, 0xb3, 0x88,
	0x36, 0x1e, 0x0a, 0x3e, 0xb8, 0x15, 0x71, 0x36, 0xe1, 0xed, 0xe6, 0x5e, 0xe5, 0x69, 0x6d, 0x60,
	0x24, 0x18, 0x5b, 0x65, 0x32, 0x11, 0xb7, 0x5c, 0xb6, 0x5b, 0x7a, 0xec, 0x5c, 0x0e, 0x3a, 0x64,
	0x39, 0x7f, 0x1e, 0x30, 0xc5, 0xdb, 0x04, 0xf5, 0x0e, 0x16, 0xac, 0x92, 0xea, 0x94, 0xb7, 0x97,
	0x50, 0x53, 0x9d, 0xea, 0xf9, 0x5e, 0xb3, 0x64, 0xcc, 0xb1, 0xc5, 0xb2, 0x99, 0x6f, 0x81, 0x80,
	0x27, 0xc0, 0x93, 0xa9, 0x62, 0x93, 0x69, 0x7b, 0x45, 0x7b, 0xa2, 0x00, 0x3a, 0xff, 0x54, 0x27,
	0x9b, 0x67, 0x53, 0x15, 0x89, 0xa4, 0xc7, 0xd2, 0x68, 0xf4, 0x46, 0xa8, 0xc3, 0xf7, 0x07, 0x4c,
	0xb1, 0x60, 0x8f, 0x2c, 0xa5, 0x4a, 0x46, 0x37, 0x66, 0x8d, 0xb0, 0x27, 0x95, 0x81, 0x0d, 0xc1,
	0x64, 0x47, 0x22, 0x51, 0x92, 0x8d, 0xd4, 0x30, 0xfa, 0x7d, 0xbd, 0xa9, 0x8d, 0x81, 0x83, 0x81,
	0x0d, 0x78, 0xfd, 0x28, 0x51, 0x5c, 0xf2, 0x54, 0xb5, 0x6b, 0xda, 0xc6, 0xc6, 0x82, 0xcf, 0xc9,
	0x7a, 0x34, 0x99, 0xc6, 0x11, 0x0f, 0xdf, 0x8a, 0x98, 0xa9, 0x28, 0x8e, 0xd4, 0x7d, 0xbb, 0x8e,
	0xe3, 0xcd, 0x2a, 0x20, 0x20, 0xa6, 0x92, 0x4f, 0xa2, 0x6c, 0xd2, 0x6e, 0xa0, 0x4d, 0x2e, 0x06,
	0x9b, 0xa4, 0x11, 0xf2, 0x58, 0xb1, 0xf6, 0x02, 0xe2, 0x5a, 0x00, 0x74, 0xcc, 0x26, 0x13, 0xd6,
	0x5e, 0xd4, 0x28, 0x0a, 0x10, 0x6a, 0xb7, 0x7c, 0xcc, 0xda, 0x4d, 0x04, 0xf1, 0x19, 0x2c, 0xd5,
	0x35, 0x57, 0xac, 0xdd, 0xd2, 0x96, 0x28, 0x04, 0x94, 0xd4, 0xe4, 0xb5, 0x68, 0x13, 0xc4, 0xe0,
	0x31, 0x78, 0x4a, 0xd6, 0x12, 0xae, 0xce, 0xec, 0x65, 0xc1, 0x6e, 0x34, 0x06, 0x3e, 0x1c, 0x3c,
	0x23, 0x01, 0x7f, 0x3f, 0x8d, 0xe4, 0xfd, 0x01, 0x53, 0xfc, 0x20, 0x4a, 0x15, 0x4b, 0x46, 0x7a,
	0x8b, 0x1a, 0x83, 0x39, 0x9a, 0xe0, 0x05, 0xd9, 0xcc, 0xbd, 0x77, 0x2a, 0x26, 0x51, 0xc2, 0xe2,
	0xb7, 0x2c, 0xce, 0xb8, 0xd9, 0xb5, 0xb9, 0x3a, 0x18, 0x43, 0xdc, 0x25, 0x5c, 0x1e, 0x0b, 0x75,
	0x92, 0xc5, 0x2a, 0x02, 0x7f, 0xc9, 0xf6, 0x2a, 0xb6, 0x98, 0xa3, 0x81, 0xf0, 0x15, 0xb8, 0xdf,
	0xfb, 0x92, 0xb3, 0x8b, 0xfb, 0x29, 0x6f, 0xaf, 0xe1, 0x7c, 0x3c, 0x14, 0xfa, 0xcd, 0xc7, 0xb3,
	0xfa, 0xa5, 0xba, 0xdf, 0x59, 0x4d, 0xe7, 0x97, 0x15, 0x12, 0x9c, 0x4b, 0xbe, 0x7f, 0xa5, 0xb8,
	0x3c, 0xc1, 0x6c, 0xc7, 0x30, 0xda, 0x24, 0x8d, 0xa9, 0x09, 0x20, 0x68, 0xa9, 0x05, 0x37, 0x77,
	0xab, 0x7e, 0xee, 0xda, 0xd9, 0x59, 0xf3, 0xb2, 0xb3, 0xcc, 0xaa, 0xfa, 0x83, 0x59, 0xd5, 0xf0,
	0xb2, 0xea, 0x31, 0x69, 0xe9, 0x7c, 0x78, 0xcb, 0x62, 0x93, 0xd0, 0x25, 0xe0, 0xe5, 0xcf, 0xe2,
	0xbc, 0xfc, 0x61, 0x10, 0x85, 0x2a, 0x0b, 0x75, 0x2a, 0x57, 0x06, 0x25, 0xd0, 0xf9, 0xfb, 0x0a,
	0xd9, 0x7c, 0x99, 0xa9, 0x4c, 0x72, 0x2f, 0x7f, 0x9e, 0x92, 0x35, 0x20, 0x84, 0x21, 0x57, 0x2a,
	0x76, 0x72, 0xc8, 0x87, 0x61, 0xea, 0x53, 0x91, 0x46, 0xe0, 0x7d, 0x93, 0x43, 0x85, 0x0c, 0xbb,
	0x95, 0x3f, 0xf7, 0x71, 0x4a, 0x26, 0x83, 0x3c, 0xf4, 0x81, 0x48, 0xab, 0x3f, 0x14, 0x69, 0x9d,
	0xbf, 0x5e, 0x24, 0xcd, 0x7c, 0xc2, 0xc1, 0x17, 0xa4, 0x99, 0x1a, 0xe6, 0xc6, 0x39, 0x2e, 0xbd,
	0xd8, 0x7c, 0x66, 0x11, 0x7f, 0xce, 0xea, 0x83, 0xc2, 0x0a, 0xc8, 0x21, 0x4a, 0x87, 0x59, 0x3a,
	0xe5, 0x49, 0xc8, 0x43, 0xc3, 0xcc, 0x36, 0x84, 0x7b, 0x18, 0xa5, 0xea, 0x02, 0xf8, 0xbc, 0x86,
	0x7c, 0x5e, 0xc8, 0xd0, 0x1a, 0xc3, 0x60, 0x38, 0x95, 0x9c, 0x85, 0x26, 0xd5, 0x6d, 0x08, 0xf6,
	0x24, 0x9b, 0x86, 0x4c, 0x71, 0x6c, 0xdf, 0xc0, 0xf6, 0x16, 0xe2, 0xc6, 0x8f, 0x4e, 0xf7, 0x87,
	0xb8, 0x5f, 0xa7, 0xfd, 0x03, 0xdc, 0xaf, 0xd3, 0xbf, 0x8c, 0xae, 0x5d, 0xd2, 0x1c, 0x65, 0x52,
	0xeb, 0x34, 0x0b, 0x14, 0xf2, 0x1c, 0xde, 0xd7, 0x9c, 0xf0, 0x30, 0xef, 0x2f, 0xed, 0x55, 0x1f,
	0x88, 0xd0, 0x65, 0xdd, 0xf7, 0x83, 0xbc, 0xbf, 0x82, 0x7a, 0x97, 0xf7, 0x9d, 0x38, 0x5c, 0xd5,
	0xab, 0x2a, 0x00, 0xf0, 0x58, 0xc8, 0xe4, 0xcd, 0x50, 0x31, 0x95, 0xa5, 0x26, 0xa5, 0x2d, 0x24,
	0x38, 0x00, 0x22, 0x86, 0x80, 0xd1, 0xe1, 0x89, 0x89, 0xbc, 0xf4, 0x62, 0xcf, 0xde, 0xe7, 0x79,
	0xc7, 0xc0, 0xc0, 0x69, 0x15, 0x7c, 0x42, 0x56, 0xf2, 0x5d, 0xd4, 0xe7, 0xc9, 0x3a, 0xe6, 0x83,
	0x0b, 0x42, 0xe8, 0x97, 0x7b, 0xa5, 0xed, 0x02, 0xb4, 0xf3, 0xe1, 0xe0, 0x37, 0x48, 0x6b, 0x2a,
	0xb9, 0xa6, 0x8b, 0xf6, 0x06, 0x4e, 0xe9, 0x89, 0x3d, 0xa5, 0x59, 0x42, 0x19, 0x94, 0x0d, 0x82,
	0x1f, 0x91, 0x25, 0x56, 0x6a, 0xdb, 0x9b, 0xff, 0xa3, 0xf6, 0x76, 0x13, 0xf0, 0x69, 0xca, 0x47,
	0xc6, 0x69, 0x5b, 0xe8, 0xb4, 0x12, 0x00, 0x9f, 0x5d, 0x61, 0x6a, 0x1b, 0x9f, 0x6d, 0xcf, 0xfa,
	0x6c, 0x5e, 0xea, 0x0f, 0x9c, 0x56, 0xb0, 0xef, 0x2c, 0xbd, 0xd1, 0x11, 0xb3, 0xa3, 0x99, 0x29,
	0x97, 0x41, 0x77, 0x19, 0x85, 0x5a, 0xd7, 0xd6, 0xba, 0x5c, 0xee, 0xfc, 0x67, 0x85, 0xb4, 0xc0,
	0x53, 0xc3, 0x6b, 0x26, 0xe7, 0xd7, 0x46, 0x50, 0x65, 0x45, 0x49, 0xa6, 0xf2, 0xa3, 0xd7, 0x48,
	0x76, 0xcd, 0x54, 0x73, 0x6b, 0xa6, 0x82, 0x8d, 0xeb, 0x36, 0x1b, 0xcf, 0x46, 0x76, 0x63, 0x6e,
	0x45, 0x03, 0x2b, 0xb9, 0x1d, 0xdb, 0x75, 0x51, 0x21, 0x5b, 0x51, 0xbf, 0xf8, 0x20, 0x2f, 0x37,
	0x67, 0x79, 0xb9, 0xac, 0x4c, 0x5a, 0x7e, 0x65, 0xf2, 0x5f, 0x15, 0xb2, 0x91, 0x53, 0x0f, 0x6c,
	0x48, 0x34, 0x42, 0x37, 0xff, 0x2f, 0xd8, 0x6a, 0x95, 0x54, 0x23, 0x4d, 0x52, 0xb5, 0x41, 0x35,
	0x0a, 0xc1, 0x3f, 0xb1, 0xd0, 0x35, 0x8b, 0x66, 0xd3, 0x5c, 0x04, 0x4d, 0xca, 0x47, 0x78, 0x2a,
	0xd6, 0xb5, 0xc6, 0x88, 0xe0, 0xff, 0x84, 0x15, 0x5c, 0x84, 0xcf, 0x0e, 0xc7, 0x2d, 0x78, 0x1c,
	0xf7, 0x98, 0xb4, 0x42, 0x0e, 0x52, 0x94, 0x8c, 0xd1, 0x25, 0xcd, 0x41, 0x09, 0xcc, 0xe6, 0x51,
	0x73, 0x4e, 0x1e, 0x75, 0xbe, 0x26, 0x1b, 0xdf, 0x30, 0x29, 0x59, 0xa2, 0xf4, 0xfa, 0x4d, 0x40,
	0x41, 0x28, 0xc0, 0x0c, 0x75, 0x69, 0x8d, 0xcf, 0x41, 0x97, 0x34, 0xf0, 0xac, 0xc7, 0x55, 0x3e,
	0xe4, 0x11, 0x6d, 0xd2, 0xf9, 0xcb, 0x2a, 0x09, 0x74, 0xae, 0xff, 0x5f, 0x76, 0x0b, 0x0c, 0xa4,
	0xab, 0x43, 0x8b, 0xf3, 0x2d, 0xc4, 0x2f, 0x28, 0xeb, 0xb3, 0x05, 0x25, 0x78, 0x5f, 0x1f, 0x20,
	0xe8, 0xe6, 0xe6, 0x20, 0x17, 0xad, 0xfb, 0x84, 0xf6, 0x73, 0x7e, 0x9f, 0x78, 0x4a, 0xd6, 0xca,
	0x11, 0xb4, 0x27, 0xf5, 0x01, 0xee, 0xc3, 0x60, 0x19, 0x25, 0x21, 0x7f, 0xaf, 0x17, 0x8e, 0x3b,
	0xdc, 0xd4, 0x45, 0x9b, 0x07, 0x77, 0xfe, 0xb4, 0x42, 0x02, 0x9d, 0xd6, 0x8e, 0x7b, 0x60, 0xcb,
	0x58, 0xaa, 0x2e, 0x24, 0x0b, 0xf5, 0x0a, 0x75, 0x26, 0xba, 0x20, 0x9c, 0xc3, 0x0e, 0xa0, 0xe7,
	0xa4, 0x2b, 0x9c, 0x39, 0x1a, 0x48, 0xbd, 0x28, 0x3d, 0x61, 0x51, 0xd2, 0x37, 0x15, 0x95, 0xc9,
	0x58, 0x0f, 0xed, 0xfc, 0xa2, 0x4a, 0x02, 0x37, 0x19, 0x8e, 0x92, 0x2b, 0x11, 0x7c, 0x45, 0x1a,
	0x97, 0x90, 0x14, 0x26, 0x11, 0x3e, 0x9a, 0xb7, 0x3f, 0x56, 0xee, 0x0c, 0xb4, 0x75, 0x70, 0x48,
	0x56, 0xee, 0x74, 0x60, 0x19, 0x66, 0xab, 0x22, 0xb3, 0x39, 0xcd, 0xe7, 0x44, 0xde, 0xc0, 0x6d,
	0x15, 0xf4, 0xbc, 0x33, 0xa5, 0x36, 0x4b, 0xc0, 0xb3, 0x71, 0xe6, 0x9d, 0x28, 0x3d, 0x8f, 0x63,
	0xeb, 0xb3, 0x7d, 0xcc, 0x6e, 0x86, 0xcb, 0xb0, 0x9d, 0xdf, 0x24, 0x0b, 0x3d, 0x29, 0x6e, 0xb8,
	0x34, 0x99, 0x5e, 0x29, 0x32, 0x3d, 0xcf, 0xda, 0xaa, 0x95, 0xb5, 0x94, 0xd4, 0xa6, 0x22, 0x35,
	0x99, 0x0f, 0x8f, 0x9d, 0xbf, 0xa9, 0x92, 0x85, 0x8b, 0x68, 0x04, 0x1d, 0xcc, 0xa3, 0xd9, 0x5d,
	0x20, 0x9c, 0x9f, 0x65, 0x3c, 0x19, 0x71, 0x43, 0x22, 0x85, 0x0c, 0x9d, 0x85, 0x91, 0xcc, 0x3b,
	0x0b, 0x23, 0x69, 0x53, 0x6c, 0xb5, 0xa4, 0xd8, 0x92, 0x1e, 0x1b, 0x0f, 0x16, 0x05, 0x0b, 0x5e,
	0x51, 0xb0, 0x4b, 0x9a, 0x92, 0x8f, 0x6e, 0x31, 0xd8, 0x74, 0x54, 0x17, 0x72, 0x91, 0xac, 0x3a,
	0x86, 0x75, 0xb2, 0x42, 0x5f, 0xf7, 0x53, 0x3e, 0x8c, 0xc6, 0x09, 0xb2, 0x69, 0x63, 0x50, 0xc8,
	0x50, 0x60, 0x4c, 0xb3, 0xf4, 0x1a, 0xdc, 0x85, 0xb1, 0x4f, 0x50, 0xef, 0x60, 0x2e, 0x1d, 0x2f,
	0xf9, 0x74, 0xfc, 0x53, 0xd2, 0x3a, 0x93, 0x21, 0x97, 0x3d, 0x21, 0x6e, 0xec, 0xaa, 0x7e, 0xee,
	0x22, 0xab, 0xce, 0x22, 0xf7, 0xc8, 0x92, 0x90, 0x3c, 0xe4, 0xb2, 0x2f, 0xb2, 0x24, 0xbf, 0x03,
	0xda, 0x50, 0xe7, 0x88, 0x2c, 0x61, 0xe7, 0x07, 0x5c, 0xb1, 0x08, 0x4b, 0x72, 0x21, 0x0b, 0x7b,
	0x4d, 0x48, 0x16, 0x02, 0x2b, 0x45, 0xe9, 0xad, 0x88, 0xdb, 0xd5, 0xbd, 0x1a, 0x78, 0x26, 0x97,
	0x3b, 0xff, 0x56, 0x21, 0x01, 0x1e, 0x99, 0xaf, 0x44, 0x1c, 0x46, 0xc9, 0xd8, 0x14, 0xc8, 0x4f,
	0x08, 0xb9, 0x16, 0x71, 0xc8, 0xe5, 0x29, 0x2b, 0xb6, 0xd7, 0x42, 0x72, 0x7d, 0x94, 0x8c, 0xdf,
	0xa8, 0x7b, 0x9c, 0x7f, 0x65, 0x60, 0x21, 0xe0, 0x40, 0x23, 0x0d, 0x98, 0x8a, 0x04, 0x2e, 0xa2,
	0x32, 0x70, 0xb0, 0xf2, 0x9e, 0xf1, 0xa6, 0xb8, 0xc0, 0x96, 0x00, 0x78, 0xa1, 0xb8, 0x55, 0x44,
	0xc2, 0x5c, 0x5e, 0x6d, 0xa8, 0x08, 0xbe, 0x05, 0x2b, 0xf8, 0x9c, 0x4d, 0x59, 0xf4, 0x37, 0xe5,
	0x77, 0xc8, 0xe2, 0x30, 0xbb, 0x44, 0x2a, 0x40, 0xf2, 0xbc, 0xbc, 0x28, 0x19, 0x3c, 0x17, 0x83,
	0x5f, 0x27, 0xcb, 0xf9, 0x51, 0x78, 0x1c, 0xa5, 0x0a, 0x3d, 0xf6, 0x10, 0x97, 0x3b, 0x96, 0x9d,
	0x3f, 0xae, 0x90, 0xa5, 0xbe, 0x48, 0x92, 0x7c, 0x8c, 0xaf, 0xc8, 0x52, 0xaa, 0x1f, 0xb1, 0xa3,
	0x0a, 0x76, 0xb4, 0xe1, 0x74, 0xa4, 0xd5, 0x03, 0xdb, 0x0e, 0xd6, 0x90, 0xa5, 0x3c, 0x7c, 0x93,
	0x09, 0xa4, 0x1a, 0x98, 0x5c, 0x09, 0x00, 0xb1, 0x46, 0xe9, 0xd9, 0x1d, 0x70, 0x5d, 0x62, 0x68,
	0x04, 0x18, 0xd0, 0x05, 0x3b, 0x11, 0x69, 0x9d, 0xc7, 0x4c, 0x71, 0x9c, 0x47, 0x97, 0x34, 0xa6,
	0x20, 0x7c, 0xe7, 0xf9, 0xaf, 0x4d, 0xe6, 0x52, 0xc0, 0x63, 0xd2, 0x42, 0x25, 0x7a, 0xab, 0xa6,
	0xcb, 0xbe, 0x02, 0xe8, 0xfc, 0x43, 0x83, 0x34, 0x06, 0xfc, 0x9a, 0x5d, 0xce, 0x65, 0x83, 0xcf,
	0xc8, 0xea, 0x48, 0x4c, 0xa6, 0x2c, 0xb9, 0xdf, 0x1f, 0xa9, 0x97, 0x31, 0x1b, 0x9b, 0x60, 0xf7,
	0x50, 0x08, 0xa8, 0xab, 0xbb, 0xf0, 0x25, 0x1b, 0x29, 0x21, 0xf7, 0x4d, 0xb8, 0x58, 0x88, 0xa3,
	0xef, 0x99, 0x68, 0xb1, 0x10, 0xd0, 0x5f, 0x96, 0xed, 0x75, 0xb4, 0x58, 0x88, 0xa3, 0xef, 0x19,
	0xee, 0xb0, 0x10, 0x2c, 0x6d, 0xe1, 0x72, 0xd0, 0x63, 0xa9, 0xa6, 0x0f, 0x28, 0x6d, 0x73, 0x00,
	0x39, 0x0d, 0x84, 0x43, 0xa9, 0x0c, 0x87, 0x14, 0x32, 0xe8, 0x7e, 0x4f, 0x44, 0x09, 0x36, 0x34,
	0x3c, 0x92, 0xcb, 0x10, 0x65, 0xf0, 0x0c, 0xcd, 0x34, 0x85, 0xe4, 0x22, 0x8c, 0x77, 0x29, 0x92,
	0x2c, 0xc5, 0x66, 0xfa, 0x7d, 0x48, 0x09, 0x60, 0xa1, 0x0b, 0x02, 0x34, 0xd4, 0xef, 0x3f, 0x0a,
	0x19, 0x2f, 0x3f, 0x92, 0x25, 0xe9, 0x15, 0x97, 0xd8, 0x78, 0x45, 0x73, 0x93, 0x8d, 0x41, 0xf2,
	0xe4, 0x32, 0x74, 0xb1, 0x8a, 0x26, 0x36, 0x84, 0xd7, 0xa3, 0x38, 0x16, 0x7a, 0xbd, 0xfa, 0xfe,
	0x53, 0x02, 0x58, 0xba, 0x82, 0x00, 0x8d, 0xa9, 0x1e, 0x3f, 0x97, 0xc1, 0x93, 0xf8, 0xac, 0xeb,
	0x12, 0x7d, 0xa3, 0xb1, 0x10, 0x58, 0x33, 0x0b, 0x43, 0xec, 0x37, 0xd0, 0x6b, 0x36, 0x22, 0x10,
	0x1e, 0x0b, 0x43, 0xe8, 0x73, 0x03, 0x15, 0x46, 0xc2, 0xd1, 0x42, 0x53, 0xd6, 0x6f, 0x9a, 0x42,
	0xd9, 0xc8, 0xa0, 0x0b, 0xa3, 0xdb, 0x28, 0x84, 0x2a, 0x67, 0x4b, 0xeb, 0x72, 0x19, 0x4b, 0xa8,
	0xe9, 0x41, 0xae, 0xdd, 0xd6, 0x33, 0x29, 0x11, 0x97, 0x0c, 0x76, 0x3c, 0x32, 0xe8, 0xfe, 0x5d,
	0x85, 0xb4, 0xde, 0x08, 0x65, 0xae, 0x36, 0x5b, 0x64, 0xbd, 0x10, 0xde, 0x7d, 0x9d, 0xdc, 0x24,
	0xe2, 0x2e, 0xa1, 0xff, 0x2f, 0xf8, 0x80, 0x6c, 0x95, 0xf0, 0xab, 0xd7, 0xef, 0xf2, 0x74, 0xa1,
	0x95, 0x60, 0x87, 0x6c, 0x38, 0x2a, 0x7d, 0xee, 0xd2, 0xaa, 0xdb, 0xe6, 0xeb, 0x61, 0xd9, 0x66,
	0x29, 0x78, 0x44, 0x76, 0x4a, 0x55, 0xff, 0x74, 0xf8, 0xaa, 0x54, 0x6e, 0xcd, 0x28, 0x7f, 0xbb,
	0x54, 0x6e, 0x77, 0x7f, 0x51, 0x25, 0xcb, 0xb9, 0x88, 0x34, 0xd5, 0x26, 0x9b, 0xb6, 0x6c, 0xcd,
	0x79, 0x8b, 0xac, 0x3b, 0x9a, 0x9e, 0x48, 0x42, 0x5a, 0x99, 0x85, 0xef, 0xa4, 0xa2, 0xd5, 0x19,
	0xf8, 0xf0, 0x67, 0xea, 0x9e, 0xd6, 0x82, 0xed, 0xb2, 0x80, 0x42, 0xf8, 0x42, 0x66, 0xa9, 0xa2,
	0xf5, 0x99, 0x61, 0x4d, 0xdd, 0x43, 0x1b, 0x33, 0x2d, 0x8e, 0xa0, 0x50, 0xa4, 0x0b, 0x33, 0x38,
	0xf2, 0x12, 0x5d, 0x9c, 0x19, 0xf8, 0x40, 0xde, 0x2a, 0xda, 0x04, 0xef, 0xcd, 0x9a, 0x0f, 0xb9,
	0xa2, 0x2d, 0xf0, 0xb8, 0xa3, 0x32, 0x1e, 0x27, 0xdd, 0x3f, 0xa9, 0x90, 0xe5, 0xdc, 0x0e, 0x9d,
	0xb3, 0x49, 0xa8, 0x2d, 0xbf, 0xdb, 0x8f, 0x63, 0xbd, 0x99, 0x0e, 0x7a, 0x94, 0x84, 0x59, 0xaa,
	0xa4, 0xd9, 0x4c, 0x47, 0x35, 0xe0, 0xe3, 0x48, 0x24, 0xb4, 0x0a, 0xeb, 0x75, 0x14, 0x7d, 0x91,
	0x8c, 0xf8, 0x54, 0x69, 0x0f, 0x39, 0x9a, 0x33, 0x75, 0xcd, 0x25, 0xad, 0x77, 0xff, 0xbc, 0x42,
	0x96, 0x8c, 0x57, 0x70, 0x2e, 0x3b, 0xc5, 0xb5, 0xc4, 0xdb, 0xa7, 0x0d, 0xb2, 0x66, 0x2b, 0x7a,
	0x19, 0x4c, 0x64, 0x93, 0x50, 0x1b, 0x1c, 0xf2, 0x38, 0xa6, 0x55, 0x1f, 0xed, 0x65, 0x71, 0x4c,
	0x6b, 0x33, 0x28, 0x67, 0x92, 0xd6, 0x61, 0x5e, 0x36, 0x7a, 0x94, 0x1c, 0x47, 0x09, 0xa7, 0x8d,
	0xee, 0x09, 0x21, 0x65, 0xd9, 0x0e, 0x56, 0xa5, 0xe4, 0x4e, 0xca, 0xc2, 0xfb, 0x2c, 0x8e, 0x69,
	0x25, 0x08, 0xc8, 0xaa, 0x05, 0x9e, 0x67, 0x8a, 0x56, 0xbb, 0x9c, 0xac, 0x1d, 0xb9, 0x57, 0x01,
	0x08, 0x60, 0x0f, 0xb2, 0x3a, 0xde, 0x25, 0xdb, 0xbe, 0xf2, 0x54, 0xc8, 0x09, 0x83, 0xfe, 0x3f,
	0x20, 0x5b, 0xbe, 0x6e, 0x38, 0x81, 0xa1, 0xab, 0xdd, 0x3f, 0xaa, 0xe4, 0x63, 0x17, 0xaf, 0x5a,
	0x77, 0xc9, 0xb6, 0x8b, 0x58, 0xa3, 0x3c, 0x22, 0x3b, 0x9e, 0x6e, 0x7f, 0xc2, 0x65, 0x34, 0x62,
	0x09, 0xad, 0xcc, 0x51, 0x1e, 0x66, 0x52, 0x4c, 0x39, 0x83, 0x8d, 0x9e, 0xed, 0xb5, 0xc7, 0xe5,
	0x24, 0x0b, 0x19, 0xad, 0x75, 0xff, 0xb1, 0x4e, 0x56, 0x8b, 0xd4, 0x84, 0xca, 0x9a, 0x3b, 0xd9,
	0x8f, 0xc8, 0xbb, 0x53, 0x91, 0x70, 0xbd, 0x4e, 0x4f, 0xb1, 0x9f, 0x8d, 0xa0, 0x5f, 0x5a, 0x09,
	0x9e, 0x90, 0x5d, 0x4f, 0xf7, 0x0d, 0x8b, 0xe0, 0x86, 0x7b, 0x36, 0xe5, 0x66, 0x0e, 0x9e, 0xfe,
	0x44, 0xc8, 0x24, 0x4a, 0xc6, 0xb4, 0x36, 0x67, 0xc0, 0x01, 0xc7, 0x8c, 0x7c, 0x4c, 0xda, 0xfe,
	0x80, 0x57, 0x8a, 0xcb, 0x44, 0x88, 0x84, 0x36, 0x1c, 0x32, 0xd2, 0x5a, 0x7c, 0x43, 0x11, 0xd2,
	0x85, 0xe0, 0x7b, 0xe4, 0x43, 0x4f, 0x75, 0x9e, 0xbf, 0x2b, 0xea, 0xf1, 0x71, 0x94, 0xd0, 0x66,
	0xf0, 0x11, 0x79, 0xf4, 0x90, 0xc9, 0x61, 0x12, 0xd2, 0x56, 0xd0, 0x21, 0x4f, 0xe6, 0x0d, 0xfe,
	0x4a, 0x64, 0x32, 0xd5, 0x9d, 0x90, 0x60, 0x8f, 0x3c, 0x7e, 0xd0, 0x06, 0x7a, 0x59, 0x9a, 0xb3,
	0x84, 0xd3, 0x68, 0x7c, 0x8d, 0x1f, 0x07, 0xe8, 0x8a, 0xc3, 0x8b, 0x96, 0x16, 0x9a, 0xae, 0xce,
	0xe9, 0x5c, 0xb3, 0xc2, 0x01, 0xbb, 0xc7, 0xe6, 0x6b, 0x73, 0x96, 0x59, 0x58, 0xf4, 0x24, 0x67,
	0x37, 0x94, 0x7e, 0x97, 0x09, 0x7a, 0x8b, 0xae, 0x07, 0xdf, 0x27, 0x1f, 0x3f, 0x64, 0x02, 0x7b,
	0xf8, 0x52, 0x48, 0x1c, 0x2e, 0x00, 0xc2, 0xf0, 0x0c, 0x5f, 0xdd, 0xf4, 0x59, 0x4a, 0x37, 0xba,
	0x7f, 0x5b, 0x21, 0x6b, 0x78, 0x9f, 0x3d, 0x60, 0x2a, 0x7f, 0x27, 0xf7, 0x88, 0xec, 0x78, 0x90,
	0x15, 0xcc, 0xdb, 0x24, 0xf0, 0x95, 0xaf, 0x5e, 0xd3, 0xca, 0x3c, 0xfc, 0xeb, 0x21, 0xad, 0xce,
	0xc3, 0xfb, 0xa7, 0x9a, 0xa9, 0x7c, 0xfc, 0xf4, 0x42, 0x33, 0x85, 0x8f, 0x0f, 0x2f, 0x68, 0xa3,
	0xfb, 0xbb, 0x64, 0xa5, 0xc0, 0x73, 0x0a, 0x73, 0x80, 0x77, 0xdf, 0x5c, 0x8b, 0x98, 0x6b, 0x46,
	0x75, 0x15, 0x79, 0xbc, 0x56, 0x9c, 0x95, 0xe9, 0x44, 0x2c, 0xa2, 0xb2, 0xda, 0x3d, 0x25, 0x2d,
	0x2c, 0x19, 0xcd, 0xbb, 0xa2, 0xd5, 0x42, 0xc8, 0xb3, 0x68, 0x8b, 0xac, 0x97, 0xd8, 0x4b, 0x21,
	0xef, 0x98, 0x0c, 0xf5, 0xca, 0x4b, 0xb8, 0xc7, 0x46, 0x37, 0x88, 0x57, 0xbb, 0xff, 0x5a, 0x21,
	0x0b, 0xaf, 0x8f, 0xf3, 0xde, 0xf4, 0x93, 0xe5, 0xc8, 0x35, 0xb2, 0x64, 0xb0, 0xe7, 0x27, 0x11,
	0x24, 0xe2, 0x2a, 0x21, 0x06, 0x38, 0x60, 0xf7, 0xb4, 0x6a, 0x19, 0x7c, 0xc3, 0xf9, 0x0d, 0xad,
	0x05, 0x94, 0x2c, 0x1b, 0xe0, 0x44, 0x24, 0xea, 0x9a, 0xd6, 0x2d, 0x93, 0xdf, 0x02, 0x9e, 0x6d,
	0x58, 0xc0, 0x57, 0xd0, 0xe9, 0x82, 0xd5, 0xe6, 0x39, 0x22, 0x8b, 0x16, 0xf2, 0xe5, 0x17, 0x27,
	0x98, 0x50, 0x25, 0xf2, 0x43, 0x44, 0x5a, 0x56, 0x37, 0x5f, 0x9e, 0x60, 0xba, 0x94, 0x0b, 0x78,
	0x93, 0x31, 0xa9, 0xb8, 0xa4, 0x4b, 0xdd, 0x7f, 0xaf, 0x90, 0xe6, 0xeb, 0xe3, 0x97, 0x11, 0x8f,
	0xc3, 0x34, 0x58, 0x27, 0x2b, 0xf9, 0x73, 0xee, 0x2e, 0x1b, 0x7a, 0x15, 0x8d, 0xaf, 0x69, 0xc5,
	0x81, 0x0c, 0xbd, 0xe0, 0xe0, 0x06, 0x3a, 0x16, 0x77, 0xb4, 0xae, 0xc7, 0x32, 0x88, 0x8e, 0xf4,
	0x26, 0xf8, 0xb8, 0xb4, 0xca, 0xdf, 0x68, 0x52, 0x0a, 0x27, 0x43, 0x81, 0xbf, 0xc5, 0x9b, 0x2a,
	0xdd, 0x83, 0x7d, 0x2a, 0xc0, 0x0b, 0x73, 0x13, 0xa7, 0x3f, 0x0a, 0x76, 0xc9, 0xd6, 0x0c, 0x3c,
	0x80, 0x63, 0xff, 0xdb, 0x4a, 0x40, 0x61, 0xc1, 0x46, 0x77, 0x7e, 0x48, 0xbf, 0x85, 0x33, 0x76,
	0xa3, 0x9c, 0x45, 0xf1, 0x25, 0x89, 0x7e, 0x5b, 0xef, 0xfe, 0xbc, 0x86, 0x37, 0x36, 0xdc, 0x58,
	0x4a, 0x96, 0xcd, 0xa3, 0xb5, 0xea, 0x1c, 0xc1, 0xf7, 0x35, 0xa6, 0xc8, 0x31, 0x50, 0x71, 0xfd,
	0xa6, 0x55, 0x58, 0x67, 0x0e, 0xeb, 0x37, 0x17, 0xb4, 0x0e, 0x31, 0x90, 0x63, 0x83, 0x0b, 0xda,
	0xb0, 0x6d, 0x5e, 0x1f, 0x63, 0x5c, 0x2c, 0xc0, 0x9a, 0x2d, 0xcc, 0xec, 0xea, 0x26, 0xa1, 0x16,
	0xa8, 0xf7, 0xba, 0xe9, 0xa1, 0x5f, 0x9a, 0xdd, 0x75, 0x51, 0xbd, 0xe7, 0xc4, 0xeb, 0x16, 0x63,
	0x72, 0xc9, 0x03, 0x31, 0x0e, 0x97, 0xbd, 0xf6, 0x3a, 0x16, 0x57, 0xec, 0xa9, 0xea, 0x37, 0x39,
	0x74, 0x15, 0xcb, 0xac, 0xd2, 0xf2, 0x4d, 0x26, 0x19, 0x84, 0xce, 0x9a, 0xd7, 0x2d, 0xc6, 0x2e,
	0xf5, 0x40, 0x0c, 0xbc, 0x75, 0x2c, 0xaf, 0x6c, 0xdf, 0xe9, 0xb7, 0x0b, 0x34, 0xe8, 0xfe, 0x01,
	0x59, 0xd3, 0x5e, 0x3b, 0x88, 0x24, 0xc7, 0xb3, 0x0c, 0xb3, 0xdb, 0x85, 0xac, 0x74, 0x03, 0xba,
	0xf0, 0x94, 0xbd, 0x28, 0xd4, 0x55, 0x96, 0xaf, 0xd8, 0x4f, 0x61, 0x7f, 0xe6, 0x74, 0x77, 0xca,
	0x33, 0x25, 0x59, 0x4c, 0x6b, 0xdd, 0x9f, 0x2f, 0x12, 0xa2, 0xb5, 0x79, 0xe5, 0x52, 0x4a, 0xd6,
	0xa8, 0x6d, 0xb2, 0x69, 0xe1, 0xfb, 0x99, 0x12, 0x13, 0xa6, 0x46, 0x90, 0x0a, 0x1b, 0xf9, 0xfc,
	0x51, 0x73, 0x0c, 0xb1, 0x55, 0x85, 0x33, 0xc7, 0x02, 0x21, 0xa2, 0xca, 0x26, 0xb5, 0xe0, 0x43,
	0xf2, 0x81, 0xa5, 0xc5, 0x2f, 0xd4, 0xa5, 0xba, 0x0e, 0x07, 0x86, 0xaf, 0x76, 0x7b, 0x68, 0x40,
	0x24, 0x5a, 0x26, 0x67, 0x61, 0x78, 0x2c, 0x94, 0xae, 0x86, 0x9d, 0x59, 0xea, 0xd2, 0x60, 0xd1,
	0x9b, 0x63, 0x2f, 0x8b, 0x6f, 0x74, 0x4c, 0x59, 0x60, 0x5f, 0xb2, 0xf4, 0x9a, 0xb6, 0xa0, 0x4a,
	0x70, 0x50, 0x91, 0xa6, 0x9a, 0xbd, 0x29, 0x29, 0x3d, 0x5c, 0x74, 0x33, 0x14, 0x31, 0x1c, 0xb1,
	0x6e, 0xa3, 0x97, 0x92, 0xf3, 0xb3, 0xa4, 0x27, 0x80, 0x3d, 0x97, 0x4b, 0xef, 0xeb, 0x64, 0xc8,
	0x62, 0xfe, 0xfc, 0xc5, 0xaf, 0x9d, 0xc9, 0xe7, 0x5f, 0x7d, 0x45, 0x57, 0xbc, 0x39, 0x1c, 0xf0,
	0x98, 0xdd, 0xd3, 0xd5, 0xe0, 0x53, 0xf2, 0x3d, 0x0b, 0xd5, 0xc3, 0xf7, 0x39, 0xf8, 0xa1, 0xfc,
	0x00, 0x42, 0xd7, 0xbc, 0xd5, 0x9e, 0xf2, 0xf7, 0x0a, 0xf2, 0x8a, 0x42, 0xd9, 0xf0, 0x40, 0x73,
	0xa0, 0x2a, 0x38, 0x40, 0xd6, 0x3d, 0x9b, 0x73, 0x19, 0x09, 0x39, 0xe0, 0x57, 0x5c, 0xf2, 0x64,
	0x64, 0xfa, 0x0f, 0x82, 0x4f, 0xc8, 0xde, 0x77, 0xf4, 0xa3, 0xad, 0x36, 0xbc, 0xad, 0x80, 0x92,
	0x9a, 0x4b, 0xba, 0x09, 0x84, 0x62, 0xc1, 0x17, 0x74, 0x2b, 0xf8, 0x98, 0x7c, 0x64, 0x21, 0x87,
	0xef, 0x15, 0x7e, 0x9c, 0x85, 0x63, 0x2c, 0x4a, 0xc6, 0x58, 0xaf, 0xd0, 0x6d, 0x3c, 0xf3, 0x2c,
	0xf7, 0x8b, 0x04, 0x0a, 0x38, 0x9e, 0x28, 0xba, 0xe3, 0x79, 0x7f, 0xdf, 0x7c, 0xec, 0xa1, 0x6d,
	0xcf, 0x0f, 0x67, 0x17, 0x7d, 0xdc, 0x95, 0x0f, 0xa0, 0x7a, 0x99, 0x09, 0x12, 0x7b, 0x43, 0x77,
	0xbd, 0x48, 0x3b, 0xe0, 0x32, 0xba, 0x65, 0x2a, 0xba, 0xe5, 0xf1, 0x3d, 0xf6, 0x1d, 0xd2, 0x47,
	0x50, 0x55, 0xda, 0xdb, 0xc7, 0x8d, 0x0b, 0x8d, 0xfe, 0xb1, 0x17, 0xe9, 0xb0, 0x3f, 0xa5, 0xf6,
	0xc3, 0xe0, 0x33, 0xd2, 0x71, 0x96, 0x33, 0x99, 0x4a, 0x7e, 0xcd, 0x93, 0x34, 0xba, 0xe5, 0xb8,
	0xd9, 0x7a, 0x09, 0x4f, 0xe0, 0xfa, 0x70, 0x50, 0x7e, 0x1f, 0xdd, 0x20, 0x6b, 0xa5, 0x94, 0xf3,
	0xf1, 0x36, 0x09, 0x2c, 0xd0, 0xb8, 0x4d, 0x5f, 0x1f, 0x2c, 0x1c, 0xea, 0xb6, 0x6a, 0xf7, 0xcf,
	0x16, 0xc8, 0xaa, 0xfd, 0xca, 0x3d, 0x4b, 0x21, 0x44, 0x5d, 0xc4, 0xbd, 0x87, 0x7b, 0xba, 0xe2,
	0xf2, 0x30, 0xdb, 0xec, 0x58, 0x7f, 0x36, 0xa2, 0x55, 0x48, 0x63, 0x4f, 0x77, 0x9e, 0xc9, 0xd1,
	0x35, 0x4b, 0x75, 0x4d, 0xfd, 0x84, 0xec, 0x7a, 0xea, 0x61, 0x76, 0x99, 0x8e, 0x64, 0x74, 0x09,
	0xfa, 0x7a, 0xf0, 0x03, 0xf2, 0xa9, 0xa7, 0xef, 0xf1, 0x2b, 0x21, 0xf9, 0x81, 0x64, 0x37, 0x58,
	0xdc, 0xe4, 0xd1, 0xda, 0x98, 0xd3, 0x55, 0x6e, 0x04, 0xfa, 0x05, 0xa8, 0xa4, 0x1f, 0xd0, 0x73,
	0x70, 0xc8, 0x22, 0x24, 0xa1, 0x67, 0x70, 0x21, 0x7a, 0x38, 0x00, 0x6d, 0xc2, 0x16, 0xce, 0x4c,
	0xd4, 0xfc, 0x3a, 0x40, 0x5b, 0x73, 0x9c, 0x03, 0xf7, 0x36, 0x1e, 0x52, 0x32, 0x67, 0x05, 0x87,
	0xef, 0xa7, 0x91, 0xe4, 0xe1, 0xb1, 0xf9, 0xb8, 0x12, 0x25, 0x63, 0xa8, 0xd0, 0x34, 0x43, 0xcc,
	0x37, 0xd5, 0x0c, 0xe1, 0xcf, 0x1e, 0x3f, 0xce, 0xf1, 0x90, 0xae, 0x04, 0x4f, 0xc9, 0x27, 0xfe,
	0xf0, 0x78, 0x88, 0x5f, 0x88, 0x0b, 0x3e, 0x99, 0x0a, 0xc9, 0xe4, 0x7d, 0x5f, 0x84, 0x9c, 0xae,
	0xce, 0xb1, 0x74, 0x2c, 0x0a, 0x6f, 0xac, 0x41, 0xb9, 0x3d, 0xb7, 0xcf, 0x10, 0xaf, 0xdc, 0x85,
	0x21, 0x85, 0xf0, 0x9d, 0x6f, 0xe8, 0x74, 0xb8, 0x1e, 0x7c, 0x4e, 0x9e, 0x7a, 0x76, 0x03, 0x3e,
	0x82, 0xb2, 0x84, 0x5d, 0xc6, 0xbc, 0x1f, 0xc9, 0x51, 0x16, 0x29, 0xbc, 0x0e, 0x70, 0x49, 0x83,
	0xe0, 0x19, 0xe9, 0xce, 0x84, 0xe2, 0xc3, 0xf6, 0x1b, 0x40, 0x1c, 0x9e, 0x3d, 0x56, 0xbb, 0x7d,
	0x31, 0xb9, 0x8c, 0x12, 0x86, 0x14, 0xbf, 0x09, 0x84, 0x36, 0xcf, 0xe8, 0x42, 0xb2, 0x24, 0xd5,
	0x36, 0x5b, 0xdd, 0x3f, 0xac, 0x90, 0xd5, 0x57, 0xf8, 0x9a, 0xbd, 0xcf, 0x14, 0x1f, 0x0b, 0x79,
	0x0f, 0xbb, 0xeb, 0x22, 0x26, 0x2d, 0x74, 0x56, 0x78, 0xaa, 0xfd, 0x31, 0x4f, 0x46, 0xe6, 0x85,
	0x86, 0xa7, 0x7a, 0x99, 0x41, 0xe2, 0x01, 0xe5, 0x78, 0x8a, 0x21, 0x4f, 0x22, 0x21, 0x4f, 0x58,
	0xc2, 0xc6, 0x5c, 0xd2, 0x5a, 0xf7, 0x96, 0x2c, 0x9f, 0xdb, 0x1f, 0x3a, 0x76, 0xc8, 0x86, 0x2d,
	0x3b, 0xc3, 0x3b, 0x8a, 0x01, 0x67, 0xb1, 0x8a, 0x26, 0x5c, 0x27, 0xa5, 0xa3, 0xea, 0xdd, 0x1f,
	0x44, 0x69, 0x5f, 0x24, 0x89, 0xbe, 0xa6, 0x38, 0xba, 0x3e, 0x1b, 0x5d, 0x73, 0x5a, 0xeb, 0xfe,
	0x33, 0x21, 0xad, 0xa1, 0x90, 0x0a, 0x2b, 0x41, 0xac, 0x7c, 0x72, 0xa1, 0x1c, 0x12, 0x2a, 0x9f,
	0x02, 0xc5, 0xa8, 0xc2, 0x4b, 0x81, 0x85, 0x99, 0xff, 0x4f, 0xf4, 0x09, 0x5f, 0xe2, 0x08, 0xf6,
	0xf3, 0xbf, 0x98, 0x68, 0x0d, 0x5f, 0x64, 0x95, 0xad, 0xca, 0xaa, 0xb3, 0xee, 0x8e, 0xac, 0x77,
	0xca, 0xbc, 0xde, 0x2a, 0xd0, 0x9e, 0xf9, 0xeb, 0xc0, 0xbc, 0xde, 0x2a, 0xf0, 0x7d, 0xf3, 0xa7,
	0x82, 0xa9, 0x12, 0x6d, 0xfb, 0xb7, 0x22, 0x36, 0x55, 0xa2, 0x6d, 0x0d, 0x68, 0xcb, 0x45, 0x4d,
	0x6d, 0x4d, 0xdc, 0x9e, 0x8b, 0xe2, 0x7a, 0x09, 0xeb, 0xb4, 0xb2, 0x8f, 0xfc, 0x97, 0x16, 0xfa,
	0x04, 0xab, 0xba, 0x72, 0xe2, 0x23, 0x21, 0x39, 0x5d, 0xc6, 0x8a, 0xd8, 0xf2, 0x02, 0xfe, 0xfb,
	0x47, 0x57, 0x90, 0x8f, 0x0a, 0xf8, 0xf0, 0xea, 0x0a, 0xaa, 0xae, 0x5b, 0x7e, 0xcc, 0x21, 0xc2,
	0xc7, 0x90, 0xab, 0x4e, 0x67, 0x07, 0x3c, 0x56, 0x8c, 0xae, 0xb9, 0xad, 0x8e, 0xfc, 0x9f, 0x0d,
	0x29, 0x75, 0xf7, 0x07, 0x76, 0x97, 0xae, 0x23, 0x3d, 0x59, 0xfe, 0x2c, 0x3e, 0x60, 0xd3, 0xc0,
	0xdd, 0x22, 0x4c, 0xa7, 0xc3, 0x5b, 0x9e, 0x9c, 0x8b, 0x28, 0x51, 0x74, 0x03, 0x19, 0xa9, 0xd0,
	0x9e, 0x30, 0xa5, 0xdf, 0xfc, 0x41, 0x80, 0x6d, 0xba, 0xce, 0x39, 0x36, 0xff, 0x01, 0xe8, 0x97,
	0xa8, 0x16, 0x6e, 0x7f, 0x41, 0xa6, 0xdb, 0x5e, 0xa3, 0x7c, 0xad, 0x3b, 0x6e, 0x2c, 0x1c, 0x25,
	0x67, 0x99, 0x3a, 0x11, 0x09, 0xbf, 0xa7, 0x6d, 0xb7, 0x3b, 0xc3, 0x00, 0xe6, 0x48, 0xfc, 0xc0,
	0x5d, 0x98, 0x0e, 0x21, 0xad, 0xda, 0x75, 0x77, 0x54, 0xab, 0xe8, 0x23, 0x77, 0x9c, 0xa1, 0x92,
	0x9c, 0x2b, 0x8c, 0xb9, 0xc7, 0xee, 0x9e, 0x6a, 0x0d, 0x84, 0xc6, 0x87, 0xee, 0x18, 0xe6, 0xbd,
	0xde, 0x29, 0x9b, 0x70, 0xfa, 0x91, 0x3b, 0xc6, 0x51, 0x9a, 0x66, 0x5c, 0xea, 0x1b, 0x99, 0xb5,
	0x46, 0xfd, 0xa3, 0x06, 0xfd, 0x9e, 0x3b, 0x00, 0x1a, 0xa3, 0xa2, 0x83, 0x07, 0x57, 0x99, 0x67,
	0xd3, 0x29, 0x97, 0xf6, 0x16, 0xfd, 0x8a, 0xab, 0x3f, 0x16, 0x77, 0xae, 0xfe, 0x99, 0x17, 0x12,
	0xf8, 0xb2, 0x11, 0x55, 0x26, 0x71, 0x7e, 0xd5, 0x5d, 0xc1, 0xb9, 0xe4, 0x45, 0x86, 0x7e, 0xec,
	0x7a, 0x57, 0x33, 0x66, 0xae, 0xfc, 0xc4, 0xed, 0xf8, 0x5c, 0x72, 0x2f, 0x83, 0x3f, 0x85, 0xd2,
	0xc8, 0x6b, 0xed, 0x99, 0x7c, 0xe6, 0x0e, 0x00, 0x63, 0x97, 0x79, 0xfe, 0x7d, 0x2c, 0x0e, 0xbc,
	0xd1, 0x4b, 0xf5, 0x53, 0x37, 0xfa, 0xce, 0x25, 0x2f, 0x33, 0xed, 0x07, 0x6e, 0xdc, 0x62, 0xd3,
	0x52, 0xdb, 0x9d, 0x59, 0x71, 0x91, 0xbb, 0xff, 0x7f, 0xce, 0x8a, 0x0b, 0xe5, 0xe7, 0xee, 0x84,
	0x8e, 0xdd, 0xdf, 0x1e, 0xe9, 0x17, 0x6e, 0xf4, 0x9e, 0x9b, 0x1f, 0x1a, 0xe9, 0x73, 0x8f, 0xe7,
	0x9c, 0x1f, 0x1d, 0xe9, 0x8b, 0xee, 0x2f, 0xab, 0x64, 0x41, 0x07, 0x07, 0xdc, 0x97, 0xf5, 0x53,
	0xc9, 0xa7, 0x2b, 0xa4, 0x65, 0xa0, 0xe1, 0x8f, 0x69, 0xc5, 0x12, 0x7b, 0xe7, 0xb4, 0x6a, 0x89,
	0xfd, 0x21, 0xad, 0xd9, 0xe2, 0x05, 0xad, 0x5b, 0xe2, 0xe1, 0x3e, 0x6d, 0x58, 0xe2, 0x8f, 0x87,
	0x74, 0xc1, 0x12, 0x5f, 0x0d, 0xe9, 0xa2, 0x25, 0xfe, 0xe4, 0x9c, 0x36, 0x2d, 0xf1, 0xa4, 0x47,
	0x5b, 0xf6, 0x34, 0xfa, 0x94, 0x58, 0xe2, 0xd7, 0x3d, 0xba, 0x64, 0xcf, 0xea, 0x88, 0x2e, 0x5b,
	0xe2, 0x41, 0x8f, 0xae, 0xd8, 0x62, 0x9f, 0xae, 0xda, 0x3d, 0x1f, 0xd3, 0x35, 0x4b, 0x3c, 0x3d,
	0xa1, 0xd4, 0x12, 0x07, 0x3d, 0xba, 0x6e, 0x8b, 0x43, 0x1a, 0xd8, 0x03, 0xf5, 0xe9, 0x86, 0xbd,
	0x84, 0x0b, 0xba, 0x69, 0x89, 0x6f, 0xe1, 0xb2, 0x50, 0x8a, 0xaf, 0xfb, 0x74, 0xdb, 0x1e, 0x77,
	0x48, 0x77, 0xba, 0x7f, 0x51, 0x21, 0xad, 0xa3, 0xa9, 0x38, 0xe7, 0x32, 0x12, 0x78, 0x98, 0x15,
	0x42, 0xe9, 0xfc, 0x0d, 0xb2, 0x56, 0xa2, 0x17, 0x22, 0x64, 0xf7, 0xfa, 0x34, 0xb3, 0xc1, 0x89,
	0x90, 0x52, 0xdc, 0xe9, 0x53, 0xb3, 0xc4, 0xe1, 0x26, 0x75, 0xa7, 0xdf, 0x54, 0x39, 0x38, 0x04,
	0x0d, 0xe2, 0x75, 0x48, 0x78, 0x17, 0x9f, 0xe0, 0xcb, 0x83, 0x46, 0xf7, 0x94, 0xb4, 0x30, 0xa2,
	0x8a, 0x0f, 0x25, 0xb9, 0x50, 0x4e, 0x6c, 0x8b, 0xac, 0x97, 0xe8, 0x59, 0xa6, 0xd2, 0x08, 0x0f,
	0x5a, 0xc7, 0xf8, 0x9b, 0x48, 0x5d, 0x1f, 0x25, 0xb4, 0xda, 0xfd, 0xab, 0x0a, 0x59, 0xb1, 0xfe,
	0x7e, 0xc9, 0x52, 0xa0, 0x39, 0x07, 0x28, 0x3b, 0x9e, 0xd1, 0xd8, 0x9f, 0x00, 0x5c, 0x8d, 0x29,
	0x70, 0xf5, 0xcb, 0x01, 0x4f, 0xa5, 0xc4, 0x14, 0x69, 0x9d, 0xd6, 0xa0, 0x9c, 0x71, 0x95, 0xe7,
	0x3c, 0x81, 0xa2, 0x36, 0xbf, 0x03, 0xd4, 0xbb, 0xff, 0x52, 0x21, 0xa4, 0x5f, 0x7c, 0x6c, 0x06,
	0xa7, 0x97, 0x52, 0x7e, 0x73, 0xd9, 0x24, 0xd4, 0x02, 0x87, 0x90, 0xca, 0xfa, 0xbd, 0x81, 0x85,
	0xfe, 0x44, 0x44, 0x89, 0xfe, 0x14, 0x63, 0x81, 0x3d, 0x91, 0x64, 0xa9, 0xf6, 0xb6, 0x85, 0x5e,
	0x98, 0x0f, 0xad, 0xfa, 0xc0, 0xb7, 0x14, 0xfb, 0x71, 0x2c, 0x94, 0x3e, 0x26, 0x6d, 0x34, 0x0c,
	0xe9, 0x9e, 0xd7, 0x45, 0xfe, 0x11, 0x53, 0xbf, 0x4c, 0xb3, 0x27, 0x77, 0x5e, 0xa8, 0xbe, 0xad,
	0x74, 0x7f, 0x4a, 0x9a, 0x6f, 0x84, 0x1a, 0x44, 0xe3, 0x6b, 0x5c, 0x59, 0xfe, 0x5c, 0x7a, 0x9c,
	0x92, 0xe5, 0x02, 0xec, 0x4d, 0xa6, 0x7a, 0x55, 0x05, 0x02, 0x67, 0x60, 0xfc, 0x9c, 0x56, 0x67,
	0xc1, 0x17, 0xb4, 0xd6, 0xdb, 0x22, 0x1b, 0x23, 0x31, 0x79, 0x76, 0x95, 0xa9, 0xec, 0x99, 0x98,
	0xf2, 0x84, 0x4d, 0xa3, 0x67, 0xd3, 0xcb, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x4b, 0x96,
	0x9c, 0xe6, 0x32, 0x00, 0x00,
}
